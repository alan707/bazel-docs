<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extending Bazel on Bazel Documentation</title>
    <link>http://localhost:1313/extending/</link>
    <description>Recent content in Extending Bazel on Bazel Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/extending/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aspects</title>
      <link>http://localhost:1313/extending/aspects/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/aspects/</guid>
      <description>&lt;p&gt;This page explains the basics and benefits of using&#xA;&lt;a href=&#34;http://localhost:1313/rules/lib/globals/bzl#aspect/&#34;&gt;aspects&lt;/a&gt; and provides simple and advanced&#xA;examples.&lt;/p&gt;&#xA;&lt;p&gt;Aspects allow augmenting build dependency graphs with additional information&#xA;and actions. Some typical scenarios when aspects can be useful:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IDEs that integrate Bazel can use aspects to collect information about the&#xA;project.&lt;/li&gt;&#xA;&lt;li&gt;Code generation tools can leverage aspects to execute on their inputs in&#xA;&lt;em&gt;target-agnostic&lt;/em&gt; manner. As an example, &lt;code&gt;BUILD&lt;/code&gt; files can specify a hierarchy&#xA;of &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protobuf&lt;/a&gt; library&#xA;definitions, and language-specific rules can use aspects to attach&#xA;actions generating protobuf support code for a particular language.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aspect-basics&#34;&gt;Aspect basics&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;BUILD&lt;/code&gt; files provide a description of a project’s source code: what source&#xA;files are part of the project, what artifacts (&lt;em&gt;targets&lt;/em&gt;) should be built from&#xA;those files, what the dependencies between those files are, etc. Bazel uses&#xA;this information to perform a build, that is, it figures out the set of actions&#xA;needed to produce the artifacts (such as running compiler or linker) and&#xA;executes those actions. Bazel accomplishes this by constructing a &lt;em&gt;dependency&#xA;graph&lt;/em&gt; between targets and visiting this graph to collect those actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatic Execution Groups (AEGs)</title>
      <link>http://localhost:1313/extending/auto-exec-groups/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/auto-exec-groups/</guid>
      <description>&lt;p&gt;Automatic execution groups select an &lt;a href=&#34;https://bazel.build/extending/platforms#:~:text=Execution%20%2D%20a%20platform%20on%20which%20build%20tools%20execute%20build%20actions%20to%20produce%20intermediate%20and%20final%20outputs.&#34;&gt;execution platform&lt;/a&gt;&#xA;for each toolchain type. In other words, one target can have multiple&#xA;execution platforms without defining execution groups.&lt;/p&gt;&#xA;&lt;h2 id=&#34;quick-summary&#34;&gt;Quick summary&lt;/h2&gt;&#xA;&lt;p&gt;Automatic execution groups are closely connected to toolchains. If you are using&#xA;toolchains, you need to set them on the affected actions (actions which use an&#xA;executable or a tool from a toolchain) by adding &lt;code&gt;toolchain&lt;/code&gt; parameter. For&#xA;example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ctx.actions.run(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    executable = ctx.toolchain[&amp;#39;@bazel_tools//tools/jdk:toolchain_type&amp;#39;].tool,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    toolchain = &amp;#39;@bazel_tools//tools/jdk:toolchain_type&amp;#39;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the action does not use a tool or executable from a toolchain, and Blaze&#xA;doesn&amp;rsquo;t detect that (&lt;a href=&#34;#first-error-message&#34;&gt;the error&lt;/a&gt; is raised), you can set&#xA;&lt;code&gt;toolchain = None&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurations</title>
      <link>http://localhost:1313/extending/config/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/config/</guid>
      <description>&lt;p&gt;This page covers the benefits and basic usage of Starlark configurations,&#xA;Bazel&amp;rsquo;s API for customizing how your project builds. It includes how to define&#xA;build settings and provides examples.&lt;/p&gt;&#xA;&lt;p&gt;This makes it possible to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;define custom flags for your project, obsoleting the need for&#xA;&lt;a href=&#34;http://localhost:1313/docs/configurable-attributes#custom-keys/&#34;&gt;&lt;code&gt;--define&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;write&#xA;&lt;a href=&#34;http://localhost:1313/rules/lib/builtins/transition#transition/&#34;&gt;transitions&lt;/a&gt; to configure deps in&#xA;different configurations than their parents&#xA;(such as &lt;code&gt;--compilation_mode=opt&lt;/code&gt; or &lt;code&gt;--cpu=arm&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;bake better defaults into rules (such as automatically build &lt;code&gt;//my:android_app&lt;/code&gt;&#xA;with a specified SDK)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;and more, all completely from .bzl files (no Bazel release required). See the&#xA;&lt;code&gt;bazelbuild/examples&lt;/code&gt; repo for&#xA;&lt;a href=&#34;https://github.com/bazelbuild/examples/tree/HEAD/configurations&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Depsets</title>
      <link>http://localhost:1313/extending/depsets/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/depsets/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://localhost:1313/rules/lib/builtins/depset/&#34;&gt;Depsets&lt;/a&gt; are a specialized data structure for efficiently&#xA;collecting data across a target’s transitive dependencies. They are an essential&#xA;element of rule processing.&lt;/p&gt;&#xA;&lt;p&gt;The defining feature of depset is its time- and space-efficient union operation.&#xA;The depset constructor accepts a list of elements (&amp;ldquo;direct&amp;rdquo;) and a list of other&#xA;depsets (&amp;ldquo;transitive&amp;rdquo;), and returns a depset representing a set containing all the&#xA;direct elements and the union of all the transitive sets. Conceptually, the&#xA;constructor creates a new graph node that has the direct and transitive nodes&#xA;as its successors. Depsets have a well-defined ordering semantics, based on&#xA;traversal of this graph.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Execution Groups</title>
      <link>http://localhost:1313/extending/exec-groups/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/exec-groups/</guid>
      <description>&lt;p&gt;Execution groups allow for multiple execution platforms within a single target.&#xA;Each execution group has its own &lt;a href=&#34;http://localhost:1313/extending/toolchains/&#34;&gt;toolchain&lt;/a&gt; dependencies and&#xA;performs its own &lt;a href=&#34;http://localhost:1313/extending/toolchains#toolchain-resolution/&#34;&gt;toolchain resolution&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;current-status&#34;&gt;Current status&lt;/h2&gt;&#xA;&lt;p&gt;Execution groups for certain natively declared actions, like &lt;code&gt;CppLink&lt;/code&gt;, can be&#xA;used inside &lt;code&gt;exec_properties&lt;/code&gt; to set per-action, per-target execution&#xA;requirements. For more details, see the&#xA;&lt;a href=&#34;#exec-groups-for-native-rules&#34;&gt;Default execution groups&lt;/a&gt; section.&lt;/p&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;Execution groups allow the rule author to define sets of actions, each with a&#xA;potentially different execution platform. Multiple execution platforms can allow&#xA;actions to execution differently, for example compiling an iOS app on a remote&#xA;(linux) worker and then linking/code signing on a local mac worker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extension Overview</title>
      <link>http://localhost:1313/extending/concepts/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/concepts/</guid>
      <description>&lt;!--  --&gt;&#xA;&lt;p&gt;This page describes how to extend the BUILD language using macros&#xA;and rules.&lt;/p&gt;&#xA;&lt;p&gt;Bazel extensions are files ending in &lt;code&gt;.bzl&lt;/code&gt;. Use a&#xA;&lt;a href=&#34;http://localhost:1313/concepts/build-files#load/&#34;&gt;load statement&lt;/a&gt; to import a symbol from an extension.&lt;/p&gt;&#xA;&lt;p&gt;Before learning the more advanced concepts, first:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Read about the &lt;a href=&#34;http://localhost:1313/rules/language/&#34;&gt;Starlark language&lt;/a&gt;, used in both the&#xA;&lt;code&gt;BUILD&lt;/code&gt; and &lt;code&gt;.bzl&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Learn how you can &lt;a href=&#34;http://localhost:1313/build/share-variables/&#34;&gt;share variables&lt;/a&gt;&#xA;between two &lt;code&gt;BUILD&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;macros-and-rules&#34;&gt;Macros and rules&lt;/h2&gt;&#xA;&lt;p&gt;A macro is a function that instantiates rules. Macros come in two flavors:&#xA;&lt;a href=&#34;http://localhost:1313/extending/macros/&#34;&gt;symbolic macros&lt;/a&gt; (new in Bazel 8) and &lt;a href=&#34;http://localhost:1313/extending/legacy-macros/&#34;&gt;legacy&#xA;macros&lt;/a&gt;. The two flavors of macros are defined&#xA;differently, but behave almost the same from the point of view of a user. A&#xA;macro is useful when a &lt;code&gt;BUILD&lt;/code&gt; file is getting too repetitive or too complex, as&#xA;it lets you reuse some code. The function is evaluated as soon as the &lt;code&gt;BUILD&lt;/code&gt;&#xA;file is read. After the evaluation of the &lt;code&gt;BUILD&lt;/code&gt; file, Bazel has little&#xA;information about macros. If your macro generates a &lt;code&gt;genrule&lt;/code&gt;, Bazel will&#xA;behave &lt;em&gt;almost&lt;/em&gt; as if you declared that &lt;code&gt;genrule&lt;/code&gt; in the &lt;code&gt;BUILD&lt;/code&gt; file. (The one&#xA;exception is that targets declared in a symbolic macro have &lt;a href=&#34;http://localhost:1313/extending/macros#visibility/&#34;&gt;special visibility&#xA;semantics&lt;/a&gt;: a symbolic macro can hide its internal&#xA;targets from the rest of the package.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Legacy Macros</title>
      <link>http://localhost:1313/extending/legacy-macros/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/legacy-macros/</guid>
      <description>&lt;p&gt;{# disableFinding(&amp;ldquo;native&amp;rdquo;) #}&#xA;{# disableFinding(&amp;ldquo;Native&amp;rdquo;) #}&#xA;{# disableFinding(LINE_OVER_80_LINK) #}&lt;/p&gt;&#xA;&lt;p&gt;Legacy macros are unstructured functions called from &lt;code&gt;BUILD&lt;/code&gt; files that can&#xA;create targets. By the end of the&#xA;&lt;a href=&#34;http://localhost:1313/extending/concepts#evaluation-model/&#34;&gt;loading phase&lt;/a&gt;, legacy macros don&amp;rsquo;t exist&#xA;anymore, and Bazel sees only the concrete set of instantiated rules.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-you-shouldnt-use-legacy-macros-and-should-use-symbolic-macros-instead&#34;&gt;Why you shouldn&amp;rsquo;t use legacy macros (and should use Symbolic macros instead)&lt;/h2&gt;&#xA;&lt;p&gt;Where possible you should use &lt;a href=&#34;macros.md#macros&#34;&gt;symbolic macros&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Symbolic macros&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prevent action at a distance&lt;/li&gt;&#xA;&lt;li&gt;Make it possible to hide implementation details through granular visibility&lt;/li&gt;&#xA;&lt;li&gt;Take typed attributes, which in turn means automatic label and select&#xA;conversion.&lt;/li&gt;&#xA;&lt;li&gt;Are more readable&lt;/li&gt;&#xA;&lt;li&gt;Will soon have &lt;a href=&#34;macros.md#laziness&#34;&gt;lazy evaluation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;&#xA;&lt;p&gt;The typical use case for a macro is when you want to reuse a rule.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macros</title>
      <link>http://localhost:1313/extending/macros/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/macros/</guid>
      <description>&lt;p&gt;{# disableFinding(&amp;ldquo;Currently&amp;rdquo;) #}&#xA;{# disableFinding(TODO) #}&lt;/p&gt;&#xA;&lt;p&gt;This page covers the basics of using macros and includes typical use cases,&#xA;debugging, and conventions.&lt;/p&gt;&#xA;&lt;p&gt;A macro is a function called from the &lt;code&gt;BUILD&lt;/code&gt; file that can instantiate rules.&#xA;Macros are mainly used for encapsulation and code reuse of existing rules and&#xA;other macros.&lt;/p&gt;&#xA;&lt;p&gt;Macros come in two flavors: symbolic macros, which are described on this page,&#xA;and &lt;a href=&#34;http://localhost:1313/legacy-macros/&#34;&gt;legacy macros&lt;/a&gt;. Where possible, we recommend using&#xA;symbolic macros for code clarity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Platforms</title>
      <link>http://localhost:1313/extending/platforms/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/platforms/</guid>
      <description>&lt;p&gt;Bazel can build and test code on a variety of hardware, operating systems, and&#xA;system configurations, using many different versions of build tools such as&#xA;linkers and compilers. To help manage this complexity, Bazel has a concept of&#xA;&lt;em&gt;constraints&lt;/em&gt; and &lt;em&gt;platforms&lt;/em&gt;. A constraint is a dimension in which build or&#xA;production environments may differ, such as CPU architecture, the presence or&#xA;absence of a GPU, or the version of a system-installed compiler. A platform is a&#xA;named collection of choices for these constraints, representing the particular&#xA;resources that are available in some environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rules</title>
      <link>http://localhost:1313/extending/rules/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/rules/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;rule&lt;/strong&gt; defines a series of &lt;a href=&#34;#actions&#34;&gt;&lt;strong&gt;actions&lt;/strong&gt;&lt;/a&gt; that Bazel performs on&#xA;inputs to produce a set of outputs, which are referenced in&#xA;&lt;a href=&#34;#providers&#34;&gt;&lt;strong&gt;providers&lt;/strong&gt;&lt;/a&gt; returned by the rule&amp;rsquo;s&#xA;&lt;a href=&#34;#implementation_function&#34;&gt;&lt;strong&gt;implementation function&lt;/strong&gt;&lt;/a&gt;. For example, a C++&#xA;binary rule might:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Take a set of &lt;code&gt;.cpp&lt;/code&gt; source files (inputs).&lt;/li&gt;&#xA;&lt;li&gt;Run &lt;code&gt;g++&lt;/code&gt; on the source files (action).&lt;/li&gt;&#xA;&lt;li&gt;Return the &lt;code&gt;DefaultInfo&lt;/code&gt; provider with the executable output and other files&#xA;to make available at runtime.&lt;/li&gt;&#xA;&lt;li&gt;Return the &lt;code&gt;CcInfo&lt;/code&gt; provider with C++-specific information gathered from the&#xA;target and its dependencies.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;From Bazel&amp;rsquo;s perspective, &lt;code&gt;g++&lt;/code&gt; and the standard C++ libraries are also inputs&#xA;to this rule. As a rule writer, you must consider not only the user-provided&#xA;inputs to a rule, but also all of the tools and libraries required to execute&#xA;the actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toolchains</title>
      <link>http://localhost:1313/extending/toolchains/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/toolchains/</guid>
      <description>&lt;p&gt;This page describes the toolchain framework, which is a way for rule authors to&#xA;decouple their rule logic from platform-based selection of tools. It is&#xA;recommended to read the &lt;a href=&#34;http://localhost:1313/extending/rules/&#34;&gt;rules&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/extending/platforms/&#34;&gt;platforms&lt;/a&gt;&#xA;pages before continuing. This page covers why toolchains are needed, how to&#xA;define and use them, and how Bazel selects an appropriate toolchain based on&#xA;platform constraints.&lt;/p&gt;&#xA;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s first look at the problem toolchains are designed to solve. Suppose you&#xA;are writing rules to support the &amp;ldquo;bar&amp;rdquo; programming language. Your &lt;code&gt;bar_binary&lt;/code&gt;&#xA;rule would compile &lt;code&gt;*.bar&lt;/code&gt; files using the &lt;code&gt;barc&lt;/code&gt; compiler, a tool that itself&#xA;is built as another target in your workspace. Since users who write &lt;code&gt;bar_binary&lt;/code&gt;&#xA;targets shouldn&amp;rsquo;t have to specify a dependency on the compiler, you make it an&#xA;implicit dependency by adding it to the rule definition as a private attribute.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
