<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bazel Documentation</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Bazel Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.bzl style guide</title>
      <link>http://localhost:1313/rules/bzl-style/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/bzl-style/</guid>
      <description>&lt;p&gt;This page covers basic style guidelines for Starlark and also includes&#xA;information on macros and rules.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/rules/language/&#34;&gt;Starlark&lt;/a&gt; is a&#xA;language that defines how software is built, and as such it is both a&#xA;programming and a configuration language.&lt;/p&gt;&#xA;&lt;p&gt;You will use Starlark to write &lt;code&gt;BUILD&lt;/code&gt; files, macros, and build rules. Macros and&#xA;rules are essentially meta-languages - they define how &lt;code&gt;BUILD&lt;/code&gt; files are written.&#xA;&lt;code&gt;BUILD&lt;/code&gt; files are intended to be simple and repetitive.&lt;/p&gt;</description>
    </item>
    <item>
      <title>`mod` Command</title>
      <link>http://localhost:1313/external/mod-command/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/mod-command/</guid>
      <description>&lt;p&gt;keywords: Bzlmod&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;mod&lt;/code&gt; command provides a range of tools to help the user understand their&#xA;external dependency graph. It lets you visualize the dependency graph, find out&#xA;why a certain module or a version of a module is present in the graph, view the&#xA;repo definitions backing modules, inspect usages of module extensions and repos&#xA;they generate, among other functions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bazel mod &amp;lt;subcommand&amp;gt; [&amp;lt;options&amp;gt;] [&amp;lt;arg&amp;gt; [&amp;lt;arg&amp;gt;...]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The available subcommands and their respective required arguments are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Guide to Skyframe `StateMachine`s</title>
      <link>http://localhost:1313/contribute/statemachine-guide/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/statemachine-guide/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;A Skyframe &lt;code&gt;StateMachine&lt;/code&gt; is a &lt;em&gt;deconstructed&lt;/em&gt; function-object that resides on&#xA;the heap. It supports flexible and evaluation without redundancy&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; when&#xA;required values are not immediately available but computed asynchronously. The&#xA;&lt;code&gt;StateMachine&lt;/code&gt; cannot tie up a thread resource while waiting, but instead has to&#xA;be suspended and resumed. The deconstruction thus exposes explicit re-entry&#xA;points so that prior computations can be skipped.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;StateMachine&lt;/code&gt;s can be used to express sequences, branching, structured logical&#xA;concurrency and are tailored specifically for Skyframe interaction.&#xA;&lt;code&gt;StateMachine&lt;/code&gt;s can be composed into larger &lt;code&gt;StateMachine&lt;/code&gt;s and share&#xA;sub-&lt;code&gt;StateMachine&lt;/code&gt;s. Concurrency is always hierarchical by construction and&#xA;purely logical. Every concurrent subtask runs in the single shared parent&#xA;SkyFunction thread.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Action Graph Query (aquery)</title>
      <link>http://localhost:1313/query/aquery/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/query/aquery/</guid>
      <description>&lt;p&gt;The &lt;code&gt;aquery&lt;/code&gt; command allows you to query for actions in your build graph.&#xA;It operates on the post-analysis Configured Target Graph and exposes&#xA;information about &lt;strong&gt;Actions, Artifacts and their relationships.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;aquery&lt;/code&gt; is useful when you are interested in the properties of the Actions/Artifacts&#xA;generated from the Configured Target Graph. For example, the actual commands run&#xA;and their inputs/outputs/mnemonics.&lt;/p&gt;&#xA;&lt;p&gt;The tool accepts several command-line &lt;a href=&#34;#command-options&#34;&gt;options&lt;/a&gt;.&#xA;Notably, the aquery command runs on top of a regular Bazel build and inherits&#xA;the set of options available during a build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adapting Bazel Rules for Remote Execution</title>
      <link>http://localhost:1313/remote/rules/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/rules/</guid>
      <description>&lt;p&gt;This page is intended for Bazel users writing custom build and test rules&#xA;who want to understand the requirements for Bazel rules in the context of&#xA;remote execution.&lt;/p&gt;&#xA;&lt;p&gt;Remote execution allows Bazel to execute actions on a separate platform, such as&#xA;a datacenter. Bazel uses a&#xA;&lt;a href=&#34;https://github.com/bazelbuild/remote-apis/blob/main/build/bazel/remote/execution/v2/remote_execution.proto&#34;&gt;gRPC protocol&lt;/a&gt;&#xA;for its remote execution. You can try remote execution with&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel-buildfarm&#34;&gt;bazel-buildfarm&lt;/a&gt;,&#xA;an open-source project that aims to provide a distributed remote execution&#xA;platform.&lt;/p&gt;&#xA;&lt;p&gt;This page uses the following terminology when referring to different&#xA;environment types or &lt;em&gt;platforms&lt;/em&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android and Bazel</title>
      <link>http://localhost:1313/docs/bazel-and-android/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/bazel-and-android/</guid>
      <description>&lt;p&gt;This page contains resources that help you use Bazel with Android projects. It&#xA;links to a tutorial, build rules, and other information specific to building&#xA;Android projects with Bazel.&lt;/p&gt;&#xA;&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;&#xA;&lt;p&gt;The following resources will help you work with Bazel on Android projects:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/start/android-app/&#34;&gt;Tutorial: Building an Android app&lt;/a&gt;. This&#xA;tutorial is a good place to start learning about Bazel commands and concepts,&#xA;and how to build Android apps with Bazel.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developer.android.com/codelabs/bazel-android-intro#0&#34;&gt;Codelab: Building Android Apps with Bazel&lt;/a&gt;.&#xA;This codelab explains how to build Android apps with Bazel.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;&#xA;&lt;p&gt;Bazel has Android rules for building and testing Android apps, integrating with&#xA;the SDK/NDK, and creating emulator images. There are also Bazel plugins for&#xA;Android Studio and IntelliJ.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Build Performance</title>
      <link>http://localhost:1313/docs/android-build-performance/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/android-build-performance/</guid>
      <description>&lt;p&gt;This page contains information on optimizing build performance for Android&#xA;apps specifically. For general build performance optimization with Bazel, see&#xA;&lt;a href=&#34;http://localhost:1313/rules/performance/&#34;&gt;Optimizing Performance&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;recommended-flags&#34;&gt;Recommended flags&lt;/h2&gt;&#xA;&lt;p&gt;The flags are in the&#xA;&lt;a href=&#34;http://localhost:1313/run/bazelrc#bazelrc-syntax-semantics/&#34;&gt;&lt;code&gt;bazelrc&lt;/code&gt; configuration syntax&lt;/a&gt;, so&#xA;they can be pasted directly into a &lt;code&gt;bazelrc&lt;/code&gt; file and invoked with&#xA;&lt;code&gt;--config=&amp;lt;configuration_name&amp;gt;&lt;/code&gt; on the command line.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Profiling performance&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Bazel writes a JSON trace profile by default to a file called&#xA;&lt;code&gt;command.profile.gz&lt;/code&gt; in Bazel&amp;rsquo;s output base.&#xA;See the &lt;a href=&#34;http://localhost:1313/rules/performance#performance-profiling/&#34;&gt;JSON Profile documentation&lt;/a&gt; for&#xA;how to read and interact with the profile.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Instrumentation Tests</title>
      <link>http://localhost:1313/docs/android-instrumentation-test/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/android-instrumentation-test/</guid>
      <description>&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re new to Bazel, start with the &lt;a href=&#34;http://localhost:1313/start/android-app/&#34;&gt;Building Android with&#xA;Bazel&lt;/a&gt; tutorial.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/docs/images/android_test.gif&#34; alt=&#34;Running Android instrumentation tests in parallel&#34; title=&#34;Android instrumentation test&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt; Running parallel Android instrumentation tests.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:1313/reference/be/android#android_instrumentation_test/&#34;&gt;&lt;code&gt;android_instrumentation_test&lt;/code&gt;&lt;/a&gt;&#xA;allows developers to test their apps on Android emulators and devices.&#xA;It utilizes real Android framework APIs and the Android Test Library.&lt;/p&gt;&#xA;&lt;p&gt;For hermeticity and reproducibility, Bazel creates and launches Android&#xA;emulators in a sandbox, ensuring that tests always run from a clean state. Each&#xA;test gets an isolated emulator instance, allowing tests to run in parallel&#xA;without passing states between them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apple Apps and Bazel</title>
      <link>http://localhost:1313/docs/bazel-and-apple/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/bazel-and-apple/</guid>
      <description>&lt;p&gt;This page contains resources that help you use Bazel to build macOS and iOS&#xA;projects. It links to a tutorial, build rules, and other information specific to&#xA;using Bazel to build and test for those platforms.&lt;/p&gt;&#xA;&lt;h2 id=&#34;working-with-bazel&#34;&gt;Working with Bazel&lt;/h2&gt;&#xA;&lt;p&gt;The following resources will help you work with Bazel on macOS and iOS projects:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/start/ios-app/&#34;&gt;Tutorial: Building an iOS app&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/reference/be/objective-c/&#34;&gt;Objective-C build rules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/rules_apple&#34;&gt;General Apple rules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/install/ide/&#34;&gt;Integration with Xcode&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;migrating-to-bazel&#34;&gt;Migrating to Bazel&lt;/h2&gt;&#xA;&lt;p&gt;If you currently build your macOS and iOS projects with Xcode, follow the steps&#xA;in the migration guide to start building them with Bazel:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Artifact-Based Build Systems</title>
      <link>http://localhost:1313/basics/artifact-based-builds/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/basics/artifact-based-builds/</guid>
      <description>&lt;p&gt;This page covers artifact-based build systems and the philosophy behind their&#xA;creation. Bazel is an artifact-based build system. While task-based build&#xA;systems are good step above build scripts, they give too much power to&#xA;individual engineers by letting them define their own tasks.&lt;/p&gt;&#xA;&lt;p&gt;Artifact-based build systems have a small number of tasks defined by the system&#xA;that engineers can configure in a limited way. Engineers still tell the system&#xA;&lt;strong&gt;what&lt;/strong&gt; to build, but the build system determines &lt;strong&gt;how&lt;/strong&gt; to build it. As with&#xA;task-based build systems, artifact-based build systems, such as Bazel, still&#xA;have buildfiles, but the contents of those buildfiles are very different. Rather&#xA;than being an imperative set of commands in a Turing-complete scripting language&#xA;describing how to produce an output, buildfiles in Bazel are a declarative&#xA;manifest describing a set of artifacts to build, their dependencies, and a&#xA;limited set of options that affect how they’re built. When engineers run &lt;code&gt;bazel&lt;/code&gt;&#xA;on the command line, they specify a set of targets to build (the &lt;strong&gt;what&lt;/strong&gt;), and&#xA;Bazel is responsible for configuring, running, and scheduling the compilation&#xA;steps (the &lt;strong&gt;how&lt;/strong&gt;). Because the build system now has full control over what&#xA;tools to run when, it can make much stronger guarantees that allow it to be far&#xA;more efficient while still guaranteeing correctness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Aspects</title>
      <link>http://localhost:1313/extending/aspects/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/aspects/</guid>
      <description>&lt;p&gt;This page explains the basics and benefits of using&#xA;&lt;a href=&#34;http://localhost:1313/rules/lib/globals/bzl#aspect/&#34;&gt;aspects&lt;/a&gt; and provides simple and advanced&#xA;examples.&lt;/p&gt;&#xA;&lt;p&gt;Aspects allow augmenting build dependency graphs with additional information&#xA;and actions. Some typical scenarios when aspects can be useful:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;IDEs that integrate Bazel can use aspects to collect information about the&#xA;project.&lt;/li&gt;&#xA;&lt;li&gt;Code generation tools can leverage aspects to execute on their inputs in&#xA;&lt;em&gt;target-agnostic&lt;/em&gt; manner. As an example, &lt;code&gt;BUILD&lt;/code&gt; files can specify a hierarchy&#xA;of &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protobuf&lt;/a&gt; library&#xA;definitions, and language-specific rules can use aspects to attach&#xA;actions generating protobuf support code for a particular language.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;aspect-basics&#34;&gt;Aspect basics&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;BUILD&lt;/code&gt; files provide a description of a project’s source code: what source&#xA;files are part of the project, what artifacts (&lt;em&gt;targets&lt;/em&gt;) should be built from&#xA;those files, what the dependencies between those files are, etc. Bazel uses&#xA;this information to perform a build, that is, it figures out the set of actions&#xA;needed to produce the artifacts (such as running compiler or linker) and&#xA;executes those actions. Bazel accomplishes this by constructing a &lt;em&gt;dependency&#xA;graph&lt;/em&gt; between targets and visiting this graph to collect those actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatic Execution Groups (AEGs)</title>
      <link>http://localhost:1313/extending/auto-exec-groups/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/auto-exec-groups/</guid>
      <description>&lt;p&gt;Automatic execution groups select an &lt;a href=&#34;https://bazel.build/extending/platforms#:~:text=Execution%20%2D%20a%20platform%20on%20which%20build%20tools%20execute%20build%20actions%20to%20produce%20intermediate%20and%20final%20outputs.&#34;&gt;execution platform&lt;/a&gt;&#xA;for each toolchain type. In other words, one target can have multiple&#xA;execution platforms without defining execution groups.&lt;/p&gt;&#xA;&lt;h2 id=&#34;quick-summary&#34;&gt;Quick summary&lt;/h2&gt;&#xA;&lt;p&gt;Automatic execution groups are closely connected to toolchains. If you are using&#xA;toolchains, you need to set them on the affected actions (actions which use an&#xA;executable or a tool from a toolchain) by adding &lt;code&gt;toolchain&lt;/code&gt; parameter. For&#xA;example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ctx.actions.run(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    executable = ctx.toolchain[&amp;#39;@bazel_tools//tools/jdk:toolchain_type&amp;#39;].tool,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    toolchain = &amp;#39;@bazel_tools//tools/jdk:toolchain_type&amp;#39;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the action does not use a tool or executable from a toolchain, and Blaze&#xA;doesn&amp;rsquo;t detect that (&lt;a href=&#34;#first-error-message&#34;&gt;the error&lt;/a&gt; is raised), you can set&#xA;&lt;code&gt;toolchain = None&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Backward Compatibility</title>
      <link>http://localhost:1313/release/backward-compatibility/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/release/backward-compatibility/</guid>
      <description>&lt;p&gt;This page provides information about how to handle backward compatibility,&#xA;including migrating from one release to another and how to communicate&#xA;incompatible changes.&lt;/p&gt;&#xA;&lt;p&gt;Bazel is evolving. Minor versions released as part of an &lt;a href=&#34;http://localhost:1313/release#bazel-versioning/&#34;&gt;LTS major&#xA;version&lt;/a&gt; are fully backward-compatible. New major LTS&#xA;releases may contain incompatible changes that require some migration effort.&#xA;For more information about Bazel&amp;rsquo;s release model, please check out the &lt;a href=&#34;http://localhost:1313/release/&#34;&gt;Release&#xA;Model&lt;/a&gt; page.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;It is recommended to use &lt;code&gt;--incompatible_*&lt;/code&gt; flags for breaking changes.&lt;/li&gt;&#xA;&lt;li&gt;For every &lt;code&gt;--incompatible_*&lt;/code&gt; flag, a GitHub issue explains the change in&#xA;behavior and aims to provide a migration recipe.&lt;/li&gt;&#xA;&lt;li&gt;Incompatible flags are recommended to be back-ported to the latest LTS&#xA;release without enabling the flag by default.&lt;/li&gt;&#xA;&lt;li&gt;APIs and behavior guarded by an &lt;code&gt;--experimental_*&lt;/code&gt; flag can change at any&#xA;time.&lt;/li&gt;&#xA;&lt;li&gt;Never run production builds with &lt;code&gt;--experimental_*&lt;/code&gt; or &lt;code&gt;--incompatible_*&lt;/code&gt;&#xA;flags.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;how-to-follow-this-policy&#34;&gt;How to follow this policy&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/install/bazelisk/&#34;&gt;For Bazel users - how to update Bazel&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/contribute/breaking-changes/&#34;&gt;For contributors - best practices for incompatible changes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/continuous-integration/tree/master/docs/release-playbook.%6D%64&#34;&gt;For release managers - how to update issue labels and release&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;what-is-stable-functionality&#34;&gt;What is stable functionality?&lt;/h2&gt;&#xA;&lt;p&gt;In general, APIs or behaviors without &lt;code&gt;--experimental_...&lt;/code&gt; flags are considered&#xA;stable, supported features in Bazel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Configurability 2021 Roadmap</title>
      <link>http://localhost:1313/community/roadmaps-configurability/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/roadmaps-configurability/</guid>
      <description>&lt;style&gt;&#xA;  .padbottom { padding-bottom: 10px; }&#xA;  .etabox {&#xA;    background: #EFEFEF;&#xA;    color: #38761D;&#xA;    font-size: 15px;&#xA;    font-weight: bold;&#xA;    display: inline;&#xA;    padding: 6px;&#xA;    margin-right: 10px;&#xA;  }&#xA;  .donestatus {&#xA;    color: #00D000;&#xA;    font-weight: bold;&#xA;    padding-left: 10px;&#xA;  }&#xA;  .inprogressstatus {&#xA;    color: #D0D000;&#xA;    font-weight: bold;&#xA;    padding-left: 10px;&#xA;  }&#xA;  .notstartedstatus {&#xA;    color: #D00000;&#xA;    font-weight: bold;&#xA;    padding-left: 10px;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;p&gt;&lt;em&gt;Last verified: 2021-01-25&lt;/em&gt; (&lt;a href=&#34;https://github.com/bazelbuild/bazel-website/commits/master/roadmaps/configuration.md&#34;&gt;update history&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Point of contact:&lt;/em&gt; &lt;a href=&#34;https://github.com/gregestren&#34;&gt;gregestren&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Discuss:&lt;/em&gt;  &lt;a href=&#34;https://github.com/bazelbuild/bazel/issues/6431&#34;&gt;Configurability roadmap: discussion&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;previous-roadmaps&#34;&gt;Previous Roadmaps&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2020/configuration.md&#34;&gt;2020&lt;/a&gt; (w/ EOY review)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2019/configuration.md&#34;&gt;2019&lt;/a&gt; (w/ EOY review)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel-website/blob/master/roadmaps/2018/configuration.md&#34;&gt;2018&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;$ bazel build //:all&lt;/code&gt; &lt;em&gt;just works&lt;/em&gt;, for any project and any platforms.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel docs style guide</title>
      <link>http://localhost:1313/contribute/docs-style-guide/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/docs-style-guide/</guid>
      <description>&lt;p&gt;Thank you for contributing to Bazel&amp;rsquo;s documentation. This serves as a quick&#xA;documentation style guide to get you started. For any style questions not&#xA;answered by this guide, follow the&#xA;&lt;a href=&#34;https://developers.google.com/style&#34;&gt;Google developer documentation style guide&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;defining-principles&#34;&gt;Defining principles&lt;/h2&gt;&#xA;&lt;p&gt;Bazel docs should uphold these principles:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Concise.&lt;/strong&gt; Use as few words as possible.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Clear.&lt;/strong&gt; Use plain language. Write without jargon for a fifth-grade&#xA;reading level.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Consistent.&lt;/strong&gt; Use the same words or phrases for repeated concepts&#xA;throughout the docs.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Correct.&lt;/strong&gt; Write in a way where the content stays correct for as long as&#xA;possible by avoiding time-based information and promises for the future.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;writing&#34;&gt;Writing&lt;/h2&gt;&#xA;&lt;p&gt;This section contains basic writing tips.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel flag cheat sheet</title>
      <link>http://localhost:1313/reference/flag-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reference/flag-cheatsheet/</guid>
      <description>&lt;html devsite&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta name=&#34;project_path&#34; value=&#34;/_project.yaml&#34;&gt;&#xA;  &lt;meta name=&#34;book_path&#34; value=&#34;/_book.yaml&#34;&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&lt;p&gt;Navigating Bazel&amp;rsquo;s extensive list of command line flags can be a challenge.&#xA;This page focuses on the most crucial flags you&amp;rsquo;ll need to know.&lt;/p&gt;&#xA;&lt;style&gt;&#xA;&#xA;table {&#xA;  width: 100%;&#xA;}&#xA;.flag {&#xA;  width: 28%&#39;&#xA;  align: left;&#xA;}&#xA;.description {&#xA;  width: 72%;&#xA;  align:left;&#xA;}&#xA;&#xA;&lt;/style&gt;&#xA;&lt;aside class=&#34;tip&#34;&gt;&#xA;  &lt;b&gt;Tip:&lt;/b&gt; Select the flag name in table to navigate to its entry in the&#xA;  command line reference.&#xA;&lt;/aside&gt;&#xA;&lt;h2 id=&#34;useful-general-options&#34;&gt;Useful general options&lt;/h2&gt;&#xA;&lt;p&gt;The following flags are meant to be set explicitly on the command line.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Glossary</title>
      <link>http://localhost:1313/reference/glossary/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reference/glossary/</guid>
      <description>&lt;h3 id=&#34;action&#34;&gt;Action&lt;/h3&gt;&#xA;&lt;p&gt;A command to run during the build, for example, a call to a compiler that takes&#xA;&lt;a href=&#34;#artifact&#34;&gt;artifacts&lt;/a&gt; as inputs and produces other artifacts as outputs.&#xA;Includes metadata like the command line arguments, action key, environment&#xA;variables, and declared input/output artifacts.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;a href=&#34;http://localhost:1313/extending/rules#actions/&#34;&gt;Rules documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;action-cache&#34;&gt;Action cache&lt;/h3&gt;&#xA;&lt;p&gt;An on-disk cache that stores a mapping of executed &lt;a href=&#34;#action&#34;&gt;actions&lt;/a&gt; to the&#xA;outputs they created. The cache key is known as the &lt;a href=&#34;#action-key&#34;&gt;action key&lt;/a&gt;. A&#xA;core component for Bazel&amp;rsquo;s incrementality model. The cache is stored in the&#xA;output base directory and thus survives Bazel server restarts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Lockfile</title>
      <link>http://localhost:1313/external/lockfile/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/lockfile/</guid>
      <description>&lt;p&gt;keywords: product:Bazel,lockfile,Bzlmod&lt;/p&gt;&#xA;&lt;p&gt;The lockfile feature in Bazel enables the recording of specific versions or&#xA;dependencies of software libraries or packages required by a project. It&#xA;achieves this by storing the result of module resolution and extension&#xA;evaluation. The lockfile promotes reproducible builds, ensuring consistent&#xA;development environments. Additionally, it enhances build efficiency by allowing&#xA;Bazel to skip the parts of the resolution process that are unaffected by changes&#xA;in project dependencies. Furthermore, the lockfile improves stability by&#xA;preventing unexpected updates or breaking changes in external libraries, thereby&#xA;reducing the risk of introducing bugs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>bazel mobile-install</title>
      <link>http://localhost:1313/docs/mobile-install/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/mobile-install/</guid>
      <description>&lt;p class=&#34;lead&#34;&gt;Fast iterative development for Android&lt;/p&gt;&#xA;&lt;p&gt;This page describes how &lt;code&gt;bazel mobile-install&lt;/code&gt; makes iterative development&#xA;for Android much faster. It describes the benefits of this approach versus the&#xA;challenges of the traditional app install method.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;To install small changes to an Android app very quickly, do the following:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Find the &lt;code&gt;android_binary&lt;/code&gt; rule of the app you want to install.&lt;/li&gt;&#xA;&lt;li&gt;Disable Proguard by removing the &lt;code&gt;proguard_specs&lt;/code&gt; attribute.&lt;/li&gt;&#xA;&lt;li&gt;Set the &lt;code&gt;multidex&lt;/code&gt; attribute to &lt;code&gt;native&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Set the &lt;code&gt;dex_shards&lt;/code&gt; attribute to &lt;code&gt;10&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Connect your device running ART (not Dalvik) over USB and enable USB&#xA;debugging on it.&lt;/li&gt;&#xA;&lt;li&gt;Run &lt;code&gt;bazel mobile-install :your_target&lt;/code&gt;. App startup will be a little&#xA;slower than usual.&lt;/li&gt;&#xA;&lt;li&gt;Edit the code or Android resources.&lt;/li&gt;&#xA;&lt;li&gt;Run &lt;code&gt;bazel mobile-install --incremental :your_target&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Enjoy not having to wait a lot.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Some command line options to Bazel that may be useful:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel modules</title>
      <link>http://localhost:1313/external/module/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/module/</guid>
      <description>&lt;p&gt;A Bazel &lt;strong&gt;module&lt;/strong&gt; is a Bazel project that can have multiple versions, each of&#xA;which publishes metadata about other modules that it depends on. This is&#xA;analogous to familiar concepts in other dependency management systems, such as a&#xA;Maven &lt;em&gt;artifact&lt;/em&gt;, an npm &lt;em&gt;package&lt;/em&gt;, a Go &lt;em&gt;module&lt;/em&gt;, or a Cargo &lt;em&gt;crate&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A module must have a &lt;code&gt;MODULE.bazel&lt;/code&gt; file at its repo root. This file is the&#xA;module&amp;rsquo;s manifest, declaring its name, version, list of direct dependencies, and&#xA;other information. For a basic example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel registries</title>
      <link>http://localhost:1313/external/registry/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/registry/</guid>
      <description>&lt;p&gt;Bazel discovers dependencies by requesting their information from Bazel&#xA;&lt;em&gt;registries&lt;/em&gt;: databases of Bazel modules. Bazel only supports one type of&#xA;registries — &lt;a href=&#34;#index_registry&#34;&gt;&lt;em&gt;index registries&lt;/em&gt;&lt;/a&gt; — local directories or static&#xA;HTTP servers following a specific format.&lt;/p&gt;&#xA;&lt;h2 id=&#34;index-registry&#34;&gt;Index registry&lt;/h2&gt;&#xA;&lt;p&gt;An index registry is a local directory or a static HTTP server containing&#xA;information about a list of modules — including their homepage, maintainers, the&#xA;&lt;code&gt;MODULE.bazel&lt;/code&gt; file of each version, and how to fetch the source of each&#xA;version. Notably, it does &lt;em&gt;not&lt;/em&gt; need to serve the source archives itself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel roadmap</title>
      <link>http://localhost:1313/about/roadmap/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/roadmap/</guid>
      <description>&lt;p&gt;As Bazel continues to evolve in response to your needs, we want to share our&#xA;2025 roadmap update.&lt;/p&gt;&#xA;&lt;p&gt;We plan to bring Bazel 9.0&#xA;&lt;a href=&#34;https://bazel.build/release/versioning&#34;&gt;long term support (LTS)&lt;/a&gt; to you in late&#xA;2025.&lt;/p&gt;&#xA;&lt;h2 id=&#34;full-transition-to-bzlmod&#34;&gt;Full transition to Bzlmod&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bazel.build/docs/bzlmod&#34;&gt;Bzlmod&lt;/a&gt; has been the standard external&#xA;dependency system in Bazel since Bazel 7, replacing the legacy WORKSPACE system.&#xA;As of March 2025, the &lt;a href=&#34;https://registry.bazel.build/&#34;&gt;Bazel Central Registry&lt;/a&gt;&#xA;hosts more than 650 modules.&lt;/p&gt;&#xA;&lt;p&gt;With Bazel 9, we will completely remove WORKSPACE functionality, and Bzlmod will&#xA;be the only way to introduce external dependencies in Bazel. To minimize the&#xA;migration cost for the community, we&amp;rsquo;ll focus on further improving our migration&#xA;&lt;a href=&#34;https://bazel.build/external/migration&#34;&gt;guide&lt;/a&gt; and&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel-central-registry/tree/main/tools#migrate_to_bzlmodpy&#34;&gt;tool&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Special Interest Groups</title>
      <link>http://localhost:1313/community/sig/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/sig/</guid>
      <description>&lt;p&gt;Bazel hosts Special Interest Groups (SIGs) to focus collaboration on particular&#xA;areas and to support communication and coordination between &lt;a href=&#34;http://localhost:1313/contribute/policy/&#34;&gt;Bazel owners,&#xA;maintainers, and contributors&lt;/a&gt;. This policy&#xA;applies to &lt;a href=&#34;http://github.com/bazelbuild&#34;&gt;&lt;code&gt;bazelbuild&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;SIGs do their work in public. The ideal scope for a SIG covers a well-defined&#xA;domain, where the majority of participation is from the community. SIGs may&#xA;focus on community maintained repositories in &lt;code&gt;bazelbuild&lt;/code&gt; (such as language&#xA;rules) or focus on areas of code in the Bazel repository (such as Remote&#xA;Execution).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Tutorial: Build a C&#43;&#43; Project</title>
      <link>http://localhost:1313/start/cpp/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/start/cpp/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;New to Bazel? You&amp;rsquo;re in the right place. Follow this First Build tutorial for a&#xA;simplified introduction to using Bazel. This tutorial defines key terms as they&#xA;are used in Bazel&amp;rsquo;s context and walks you through the basics of the Bazel&#xA;workflow. Starting with the tools you need, you will build and run three&#xA;projects with increasing complexity and learn how and why they get more complex.&lt;/p&gt;&#xA;&lt;p&gt;While Bazel is a &lt;a href=&#34;https://bazel.build/basics/build-systems&#34;&gt;build system&lt;/a&gt; that&#xA;supports multi-language builds, this tutorial uses a C++ project as an example&#xA;and provides the general guidelines and flow that apply to most languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Tutorial: Build a Go Project</title>
      <link>http://localhost:1313/start/go/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/start/go/</guid>
      <description>&lt;p&gt;{# disableFinding(LINE_OVER_80_LINK) #}&#xA;{# disableFinding(&amp;ldquo;below&amp;rdquo;) #}&lt;/p&gt;&#xA;&lt;p&gt;This tutorial introduces you to the basics of Bazel by showing you how to build&#xA;a Go (Golang) project. You&amp;rsquo;ll learn how to set up your workspace, build a small&#xA;program, import a library, and run its test. Along the way, you&amp;rsquo;ll learn key&#xA;Bazel concepts, such as targets and &lt;code&gt;BUILD&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;p&gt;Estimated completion time: 30 minutes&lt;/p&gt;&#xA;&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;&#xA;&lt;h3 id=&#34;install-bazel&#34;&gt;Install Bazel&lt;/h3&gt;&#xA;&lt;p&gt;Before you get started, first &lt;a href=&#34;http://localhost:1313/install/&#34;&gt;install bazel&lt;/a&gt; if you haven&amp;rsquo;t done so&#xA;already.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Tutorial: Build a Java Project</title>
      <link>http://localhost:1313/start/java/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/start/java/</guid>
      <description>&lt;p&gt;This tutorial covers the basics of building Java applications with&#xA;Bazel. You will set up your workspace and build a simple Java project that&#xA;illustrates key Bazel concepts, such as targets and &lt;code&gt;BUILD&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;p&gt;Estimated completion time: 30 minutes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-youll-learn&#34;&gt;What you&amp;rsquo;ll learn&lt;/h2&gt;&#xA;&lt;p&gt;In this tutorial you learn how to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Build a target&lt;/li&gt;&#xA;&lt;li&gt;Visualize the project&amp;rsquo;s dependencies&lt;/li&gt;&#xA;&lt;li&gt;Split the project into multiple targets and packages&lt;/li&gt;&#xA;&lt;li&gt;Control target visibility across packages&lt;/li&gt;&#xA;&lt;li&gt;Reference targets through labels&lt;/li&gt;&#xA;&lt;li&gt;Deploy a target&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;&#xA;&lt;h3 id=&#34;install-bazel&#34;&gt;Install Bazel&lt;/h3&gt;&#xA;&lt;p&gt;To prepare for the tutorial, first &lt;a href=&#34;http://localhost:1313/install/&#34;&gt;Install Bazel&lt;/a&gt; if&#xA;you don&amp;rsquo;t have it installed already.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Tutorial: Build an Android App</title>
      <link>http://localhost:1313/start/android-app/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/start/android-app/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There are known limitations on using Bazel for building Android apps.&#xA;Visit the Github &lt;a href=&#34;https://github.com/bazelbuild/bazel/issues?q=is%3Aissue+is%3Aopen+label%3Ateam-Android&#34;&gt;team-Android hotlist&lt;/a&gt; to see the list of known issues. While the Bazel team and Open Source Software (OSS) contributors work actively to address known issues, users should be aware that Android Studio does not officially support Bazel projects.&lt;/p&gt;&#xA;&lt;p&gt;This tutorial covers how to build a simple Android app using Bazel.&lt;/p&gt;&#xA;&lt;p&gt;Bazel supports building Android apps using the&#xA;&lt;a href=&#34;http://localhost:1313/reference/be/android/&#34;&gt;Android rules&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Tutorial: Build an iOS App</title>
      <link>http://localhost:1313/start/ios-app/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/start/ios-app/</guid>
      <description>&lt;p&gt;This tutorial has been moved into the &lt;a href=&#34;https://github.com/bazelbuild/rules_apple/blob/master/doc/tutorials/ios-app.md&#34;&gt;bazelbuild/rules_apple&lt;/a&gt; repository.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Tutorial: Configure C&#43;&#43; Toolchains</title>
      <link>http://localhost:1313/tutorials/ccp-toolchain-config/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/ccp-toolchain-config/</guid>
      <description>&lt;p&gt;This tutorial uses an example scenario to describe how to configure C++&#xA;toolchains for a project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-youll-learn&#34;&gt;What you&amp;rsquo;ll learn&lt;/h2&gt;&#xA;&lt;p&gt;In this tutorial you learn how to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set up the build environment&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;--toolchain_resolution_debug&lt;/code&gt; to debug toolchain resolution&lt;/li&gt;&#xA;&lt;li&gt;Configure the C++ toolchain&lt;/li&gt;&#xA;&lt;li&gt;Create a Starlark rule that provides additional configuration for the&#xA;&lt;code&gt;cc_toolchain&lt;/code&gt; so that Bazel can build the application with &lt;code&gt;clang&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Build the C++ binary by running &lt;code&gt;bazel build //main:hello-world&lt;/code&gt; on a&#xA;Linux machine&lt;/li&gt;&#xA;&lt;li&gt;Cross-compile the binary for android by running &lt;code&gt;bazel build //main:hello-world --platforms=//:android_x86_64&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;&#xA;&lt;p&gt;This tutorial assumes you are on Linux and have successfully built C++&#xA;applications and installed the appropriate tooling and libraries. The tutorial&#xA;uses &lt;code&gt;clang version 19&lt;/code&gt;, which you can install on your system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel Vision</title>
      <link>http://localhost:1313/about/vision/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/vision/</guid>
      <description>&lt;p&gt;Any software developer can efficiently build, test, and package&#xA;any project, of any size or complexity, with tooling that&amp;rsquo;s easy to adopt and&#xA;extend.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Engineers can take build fundamentals for granted.&lt;/strong&gt; Software developers&#xA;focus on the creative process of authoring code because the mechanical&#xA;process of build and test is solved. When customizing the build system to&#xA;support new languages or unique organizational needs, users focus on the&#xA;aspects of extensibility that are unique to their use case, without having&#xA;to reinvent the basic plumbing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Best Practices</title>
      <link>http://localhost:1313/configure/best-practices/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/best-practices/</guid>
      <description>&lt;p&gt;This page assumes you are familiar with Bazel and provides guidelines and&#xA;advice on structuring your projects to take full advantage of Bazel&amp;rsquo;s features.&lt;/p&gt;&#xA;&lt;p&gt;The overall goals are:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To use fine-grained dependencies to allow parallelism and incrementality.&lt;/li&gt;&#xA;&lt;li&gt;To keep dependencies well-encapsulated.&lt;/li&gt;&#xA;&lt;li&gt;To make code well-structured and testable.&lt;/li&gt;&#xA;&lt;li&gt;To create a build configuration that is easy to understand and maintain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These guidelines are not requirements: few projects will be able to adhere to&#xA;all of them.  As the man page for lint says, &amp;ldquo;A special reward will be presented&#xA;to the first person to produce a real program that produces no errors with&#xA;strict checking.&amp;rdquo; However, incorporating as many of these principles as possible&#xA;should make a project more readable, less error-prone, and faster to build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Breaking down build performance</title>
      <link>http://localhost:1313/advanced/performance/build-performance-breakdown/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/performance/build-performance-breakdown/</guid>
      <description>&lt;p&gt;Bazel is complex and does a lot of different things over the course of a build,&#xA;some of which can have an impact on build performance. This page attempts to map&#xA;some of these Bazel concepts to their implications on build performance. While&#xA;not extensive, we have included some examples of how to detect build performance&#xA;issues through &lt;a href=&#34;http://localhost:1313/configure/build-performance-metrics/&#34;&gt;extracting metrics&lt;/a&gt;&#xA;and what you can do to fix them. With this, we hope you can apply these concepts&#xA;when investigating build performance regressions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build Event Protocol</title>
      <link>http://localhost:1313/remote/bep/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/bep/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto&#34;&gt;Build Event&#xA;Protocol&lt;/a&gt;&#xA;(BEP) allows third-party programs to gain insight into a Bazel invocation. For&#xA;example, you could use the BEP to gather information for an IDE&#xA;plugin or a dashboard that displays build results.&lt;/p&gt;&#xA;&lt;p&gt;The protocol is a set of &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol&#xA;buffer&lt;/a&gt; messages with some&#xA;semantics defined on top of it. It includes information about build and test&#xA;results, build progress, the build configuration and much more. The BEP is&#xA;intended to be consumed programmatically and makes parsing Bazel’s&#xA;command line output a thing of the past.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build Event Protocol Examples</title>
      <link>http://localhost:1313/remote/bep-examples/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/bep-examples/</guid>
      <description>&lt;p&gt;The full specification of the Build Event Protocol can be found in its protocol&#xA;buffer definition. However, it might be helpful to build up some intuition&#xA;before looking at the specification.&lt;/p&gt;&#xA;&lt;p&gt;Consider a simple Bazel workspace that consists of two empty shell scripts&#xA;&lt;code&gt;foo.sh&lt;/code&gt; and &lt;code&gt;foo_test.sh&lt;/code&gt; and the following &lt;code&gt;BUILD&lt;/code&gt; file:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sh_library(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;foo_lib&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = [&amp;#34;foo.sh&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sh_test(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;foo_test&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = [&amp;#34;foo_test.sh&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    deps = [&amp;#34;:foo_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When running &lt;code&gt;bazel test ...&lt;/code&gt; on this project the build graph of the generated&#xA;build events will resemble the graph below. The arrows indicate the&#xA;aforementioned parent and child relationship. Note that some build events and&#xA;most fields have been omitted for brevity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build Event Protocol Glossary</title>
      <link>http://localhost:1313/remote/bep-glossary/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/bep-glossary/</guid>
      <description>&lt;p&gt;Each BEP event type has its own semantics, minimally documented in&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel/blob/master/src/main/java/com/google/devtools/build/lib/buildeventstream/proto/build_event_stream.proto&#34;&gt;build_event_stream.proto&lt;/a&gt;.&#xA;The following glossary describes each event type.&lt;/p&gt;&#xA;&lt;h2 id=&#34;aborted&#34;&gt;Aborted&lt;/h2&gt;&#xA;&lt;p&gt;Unlike other events, &lt;code&gt;Aborted&lt;/code&gt; does not have a corresponding ID type, because&#xA;the &lt;code&gt;Aborted&lt;/code&gt; event &lt;em&gt;replaces&lt;/em&gt; events of other types. This event indicates that&#xA;the build terminated early and the event ID it appears under was not produced&#xA;normally. &lt;code&gt;Aborted&lt;/code&gt; contains an enum and human-friendly description to explain&#xA;why the build did not complete.&lt;/p&gt;</description>
    </item>
    <item>
      <title>BUILD files</title>
      <link>http://localhost:1313/concepts/build-files/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/concepts/build-files/</guid>
      <description>&lt;p&gt;The previous sections described packages, targets and labels, and the&#xA;build dependency graph abstractly. This section describes the concrete syntax&#xA;used to define a package.&lt;/p&gt;&#xA;&lt;p&gt;By definition, every package contains a &lt;code&gt;BUILD&lt;/code&gt; file, which is a short&#xA;program.&lt;/p&gt;&#xA;&lt;p&gt;Note: The &lt;code&gt;BUILD&lt;/code&gt; file can be named either &lt;code&gt;BUILD&lt;/code&gt; or &lt;code&gt;BUILD.bazel&lt;/code&gt;. If both&#xA;files exist, &lt;code&gt;BUILD.bazel&lt;/code&gt; takes precedence over &lt;code&gt;BUILD&lt;/code&gt;.&#xA;For simplicity&amp;rsquo;s sake, the documentation refers to these files simply as &lt;code&gt;BUILD&lt;/code&gt;&#xA;files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build programs with Bazel</title>
      <link>http://localhost:1313/run/build/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/run/build/</guid>
      <description>&lt;p&gt;This page covers how to build a program with Bazel, build command syntax, and&#xA;target pattern syntax.&lt;/p&gt;&#xA;&lt;h2 id=&#34;quickstart&#34;&gt;Quickstart&lt;/h2&gt;&#xA;&lt;p&gt;To run Bazel, go to your base &lt;a href=&#34;http://localhost:1313/concepts/build-ref#workspace/&#34;&gt;workspace&lt;/a&gt; directory&#xA;or any of its subdirectories and type &lt;code&gt;bazel&lt;/code&gt;. See &lt;a href=&#34;#bazel-build&#34;&gt;build&lt;/a&gt; if you&#xA;need to make a new workspace.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bazel help&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             [Bazel release bazel {{ &amp;#34;&amp;lt;var&amp;gt;&amp;#34; }}version{{ &amp;#34;&amp;lt;/var&amp;gt;&amp;#34; }}]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage: bazel {{ &amp;#34;&amp;lt;var&amp;gt;&amp;#34; }}command{{ &amp;#34;&amp;lt;/var&amp;gt;&amp;#34; }} {{ &amp;#34;&amp;lt;var&amp;gt;&amp;#34; }}options{{ &amp;#34;&amp;lt;/var&amp;gt;&amp;#34; }} ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;available-commands&#34;&gt;Available commands&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#analyze-profile/&#34;&gt;&lt;code&gt;analyze-profile&lt;/code&gt;&lt;/a&gt;: Analyzes build profile data.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#aquery/&#34;&gt;&lt;code&gt;aquery&lt;/code&gt;&lt;/a&gt;: Executes a query on the &lt;a href=&#34;#analysis&#34;&gt;post-analysis&lt;/a&gt; action graph.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#bazel-build&#34;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt;: Builds the specified targets.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#canonicalize-flags/&#34;&gt;&lt;code&gt;canonicalize-flags&lt;/code&gt;&lt;/a&gt;: Canonicalize Bazel flags.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#clean/&#34;&gt;&lt;code&gt;clean&lt;/code&gt;&lt;/a&gt;: Removes output files and optionally stops the server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/query/cquery/&#34;&gt;&lt;code&gt;cquery&lt;/code&gt;&lt;/a&gt;: Executes a &lt;a href=&#34;#analysis&#34;&gt;post-analysis&lt;/a&gt; dependency graph query.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#dump/&#34;&gt;&lt;code&gt;dump&lt;/code&gt;&lt;/a&gt;: Dumps the internal state of the Bazel server process.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#help/&#34;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt;: Prints help for commands, or the index.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#info/&#34;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/a&gt;: Displays runtime info about the bazel server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#fetching-external-dependencies&#34;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;: Fetches all external dependencies of a target.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#mobile-install/&#34;&gt;&lt;code&gt;mobile-install&lt;/code&gt;&lt;/a&gt;: Installs apps on mobile devices.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/query/guide/&#34;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt;: Executes a dependency graph query.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#running-executables/&#34;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt;: Runs the specified target.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#shutdown/&#34;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt;: Stops the Bazel server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#running-tests/&#34;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt;: Builds and runs the specified test targets.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#version/&#34;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt;: Prints version information for Bazel.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;getting-help&#34;&gt;Getting help&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;bazel help {{ &#39;&amp;lt;var&amp;gt;&#39; }}command{{ &#39;&amp;lt;/var&amp;gt;&#39; }}&lt;/code&gt;: Prints help and options for&#xA;&lt;code&gt;{{ &#39;&amp;lt;var&amp;gt;&#39; }}command{{ &#39;&amp;lt;/var&amp;gt;&#39; }}&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bazel help &lt;/code&gt;&lt;a href=&#34;http://localhost:1313/docs/user-manual#startup-options/&#34;&gt;&lt;code&gt;startup_options&lt;/code&gt;&lt;/a&gt;: Options for the JVM hosting Bazel.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bazel help &lt;/code&gt;&lt;a href=&#34;#specifying-build-targets&#34;&gt;&lt;code&gt;target-syntax&lt;/code&gt;&lt;/a&gt;: Explains the syntax for specifying targets.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bazel help info-keys&lt;/code&gt;: Displays a list of keys used by the info command.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The &lt;code&gt;bazel&lt;/code&gt; tool performs many functions, called commands. The most commonly&#xA;used ones are &lt;code&gt;bazel build&lt;/code&gt; and &lt;code&gt;bazel test&lt;/code&gt;. You can browse the online help&#xA;messages using &lt;code&gt;bazel help&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bzlmod Migration Guide</title>
      <link>http://localhost:1313/external/migration/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/migration/</guid>
      <description>&lt;p&gt;keywords: bzlmod&lt;/p&gt;&#xA;&lt;p&gt;{# disableFinding(LINE_OVER_80_LINK) #}&lt;/p&gt;&#xA;&lt;p&gt;Due to the &lt;a href=&#34;http://localhost:1313/external/overview#workspace-shortcomings/&#34;&gt;shortcomings of&#xA;WORKSPACE&lt;/a&gt;, Bzlmod is replacing the&#xA;legacy WORKSPACE system. The WORKSPACE file is already disabled in Bazel 8 (late&#xA;2024) and will be removed in Bazel 9 (late 2025). This guide helps you migrate&#xA;your project to Bzlmod and drop WORKSPACE for managing external dependencies.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-migrate-to-bzlmod&#34;&gt;Why migrate to Bzlmod?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;There are many &lt;a href=&#34;overview#benefits&#34;&gt;advantages&lt;/a&gt; compared to the legacy&#xA;WORKSPACE system, which helps to ensure a healthy growth of the Bazel&#xA;ecosystem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; and Bazel</title>
      <link>http://localhost:1313/docs/bazel-and-cpp/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/bazel-and-cpp/</guid>
      <description>&lt;p&gt;This page contains resources that help you use Bazel with C++ projects. It links&#xA;to a tutorial, build rules, and other information specific to building C++&#xA;projects with Bazel.&lt;/p&gt;&#xA;&lt;h2 id=&#34;working-with-bazel&#34;&gt;Working with Bazel&lt;/h2&gt;&#xA;&lt;p&gt;The following resources will help you work with Bazel on C++ projects:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/start/cpp/&#34;&gt;Tutorial: Building a C++ project&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/tutorials/cpp-use-cases/&#34;&gt;C++ common use cases&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/reference/be/c-cpp/&#34;&gt;C/C++ rules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Essential Libraries&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://abseil.io/docs/cpp/quickstart&#34;&gt;Abseil&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/nelhage/rules_boost&#34;&gt;Boost&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hedronvision/bazel-make-cc-https-easy&#34;&gt;HTTPS Requests: CPR and libcurl&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/docs/cc-toolchain-config-reference/&#34;&gt;C++ toolchain configuration&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/tutorials/ccp-toolchain-config/&#34;&gt;Tutorial: Configuring C++ toolchains&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/configure/integrate-cpp/&#34;&gt;Integrating with C++ rules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;best-practices&#34;&gt;Best practices&lt;/h2&gt;&#xA;&lt;p&gt;In addition to &lt;a href=&#34;http://localhost:1313/configure/best-practices/&#34;&gt;general Bazel best practices&lt;/a&gt;, below are&#xA;best practices specific to C++ projects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; Toolchain Configuration</title>
      <link>http://localhost:1313/docs/cc-toolchain-config-reference/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/cc-toolchain-config-reference/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;To invoke the compiler with the right options, Bazel needs some knowledge about&#xA;the compiler internals, such as include directories and important flags.&#xA;In other words, Bazel needs a simplified model of the compiler to understand its&#xA;workings.&lt;/p&gt;&#xA;&lt;p&gt;Bazel needs to know the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Whether the compiler supports thinLTO, modules, dynamic linking, or PIC&#xA;(position independent code).&lt;/li&gt;&#xA;&lt;li&gt;Paths to the required tools such as gcc, ld, ar, objcopy, and so on.&lt;/li&gt;&#xA;&lt;li&gt;The built-in system include directories. Bazel needs these to validate that&#xA;all headers that were included in the source file were properly declared in&#xA;the &lt;code&gt;BUILD&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;li&gt;The default sysroot.&lt;/li&gt;&#xA;&lt;li&gt;Which flags to use for compilation, linking, archiving.&lt;/li&gt;&#xA;&lt;li&gt;Which flags to use for the supported compilation modes (opt, dbg, fastbuild).&lt;/li&gt;&#xA;&lt;li&gt;Make variables specifically required by the compiler.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If the compiler has support for multiple architectures, Bazel needs to configure&#xA;them separately.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Calling Bazel from scripts</title>
      <link>http://localhost:1313/run/scripts/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/run/scripts/</guid>
      <description>&lt;p&gt;You can call Bazel from scripts to perform a build, run tests, or query&#xA;the dependency graph. Bazel has been designed to enable effective scripting, but&#xA;this section lists some details to bear in mind to make your scripts more&#xA;robust.&lt;/p&gt;&#xA;&lt;h3 id=&#34;choosing-the-output-base&#34;&gt;Choosing the output base&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;--output_base&lt;/code&gt; option controls where the Bazel process should write the&#xA;outputs of a build to, as well as various working files used internally by&#xA;Bazel, one of which is a lock that guards against concurrent mutation of the&#xA;output base by multiple Bazel processes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Challenges of Writing Rules</title>
      <link>http://localhost:1313/rules/challenges/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/challenges/</guid>
      <description>&lt;p&gt;This page gives a high-level overview of the specific issues and challenges&#xA;of writing efficient Bazel rules.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary-requirements&#34;&gt;Summary Requirements&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assumption: Aim for Correctness, Throughput, Ease of Use &amp;amp; Latency&lt;/li&gt;&#xA;&lt;li&gt;Assumption: Large Scale Repositories&lt;/li&gt;&#xA;&lt;li&gt;Assumption: BUILD-like Description Language&lt;/li&gt;&#xA;&lt;li&gt;Historic: Hard Separation between Loading, Analysis, and Execution is&#xA;Outdated, but still affects the API&lt;/li&gt;&#xA;&lt;li&gt;Intrinsic: Remote Execution and Caching are Hard&lt;/li&gt;&#xA;&lt;li&gt;Intrinsic: Using Change Information for Correct and Fast Incremental Builds&#xA;requires Unusual Coding Patterns&lt;/li&gt;&#xA;&lt;li&gt;Intrinsic: Avoiding Quadratic Time and Memory Consumption is Hard&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;&#xA;&lt;p&gt;Here are some assumptions made about the build system, such as need for&#xA;correctness, ease of use, throughput, and large scale repositories. The&#xA;following sections address these assumptions and offer guidelines to ensure&#xA;rules are written in an effective manner.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Client/server implementation</title>
      <link>http://localhost:1313/run/client-server/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/run/client-server/</guid>
      <description>&lt;p&gt;The Bazel system is implemented as a long-lived server process. This allows it&#xA;to perform many optimizations not possible with a batch-oriented implementation,&#xA;such as caching of BUILD files, dependency graphs, and other metadata from one&#xA;build to the next. This improves the speed of incremental builds, and allows&#xA;different commands, such as &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;query&lt;/code&gt; to share the same cache of&#xA;loaded packages, making queries very fast. Each server can handle at most one&#xA;invocation at a time; further concurrent invocations will either block or&#xA;fail-fast (see &lt;code&gt;--block_for_lock&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code coverage with Bazel</title>
      <link>http://localhost:1313/configure/coverage/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/coverage/</guid>
      <description>&lt;p&gt;Bazel features a &lt;code&gt;coverage&lt;/code&gt; sub-command to produce code coverage&#xA;reports on repositories that can be tested with &lt;code&gt;bazel coverage&lt;/code&gt;. Due&#xA;to the idiosyncrasies of the various language ecosystems, it is not&#xA;always trivial to make this work for a given project.&lt;/p&gt;&#xA;&lt;p&gt;This page documents the general process for creating and viewing&#xA;coverage reports, and also features some language-specific notes for&#xA;languages whose configuration is well-known. It is best read by first&#xA;reading &lt;a href=&#34;#creating-a-coverage-report&#34;&gt;the general section&lt;/a&gt;, and then&#xA;reading about the requirements for a specific language. Note also the&#xA;&lt;a href=&#34;#remote-execution&#34;&gt;remote execution section&lt;/a&gt;, which requires some&#xA;additional considerations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Command-Line Completion</title>
      <link>http://localhost:1313/install/completion/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/completion/</guid>
      <description>&lt;p&gt;You can enable command-line completion (also known as tab-completion) in Bash&#xA;and Zsh. This lets you tab-complete command names, flags names and flag values,&#xA;and target names.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bash&#34;&gt;Bash&lt;/h2&gt;&#xA;&lt;p&gt;Bazel comes with a Bash completion script.&lt;/p&gt;&#xA;&lt;p&gt;If you installed Bazel:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;From the APT repository, then you&amp;rsquo;re done &amp;ndash; the Bash completion script is&#xA;already installed in &lt;code&gt;/etc/bash_completion.d&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;From Homebrew, then you&amp;rsquo;re done &amp;ndash; the Bash completion script is&#xA;already installed in &lt;code&gt;$(brew --prefix)/etc/bash_completion.d&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Commands and Options</title>
      <link>http://localhost:1313/docs/user-manual/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/user-manual/</guid>
      <description>&lt;p&gt;This page covers the options that are available with various Bazel commands,&#xA;such as &lt;code&gt;bazel build&lt;/code&gt;, &lt;code&gt;bazel run&lt;/code&gt;, and &lt;code&gt;bazel test&lt;/code&gt;. This page is a companion&#xA;to the list of Bazel&amp;rsquo;s commands in &lt;a href=&#34;http://localhost:1313/run/build/&#34;&gt;Build with Bazel&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;target-syntax&#34;&gt;Target syntax&lt;/h2&gt;&#xA;&lt;p&gt;Some commands, like &lt;code&gt;build&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;, can operate on a list of targets. They&#xA;use a syntax more flexible than labels, which is documented in&#xA;&lt;a href=&#34;http://localhost:1313/run/build#specifying-build-targets/&#34;&gt;Specifying targets to build&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;options&#34;&gt;Options&lt;/h2&gt;&#xA;&lt;p&gt;The following sections describe the options available during a&#xA;build. When &lt;code&gt;--long&lt;/code&gt; is used on a help command, the on-line&#xA;help messages provide summary information about the meaning, type and&#xA;default value for each option.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common C&#43;&#43; Build Use Cases</title>
      <link>http://localhost:1313/tutorials/cpp-use-cases/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/cpp-use-cases/</guid>
      <description>&lt;p&gt;Here you will find some of the most common use cases for building C++ projects&#xA;with Bazel. If you have not done so already, get started with building C++&#xA;projects with Bazel by completing the tutorial&#xA;&lt;a href=&#34;http://localhost:1313/start/cpp/&#34;&gt;Introduction to Bazel: Build a C++ Project&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For information on cc_library and hdrs header files, see&#xA;&lt;a href=&#34;http://localhost:1313/reference/be/c-cpp#cc_library&#34;&gt;cc_library&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;including-multiple-files-in-a-target&#34;&gt;Including multiple files in a target&lt;/h2&gt;&#xA;&lt;p&gt;You can include multiple files in a single target with&#xA;&lt;a href=&#34;http://localhost:1313/reference/be/functions#glob&#34;&gt;glob&lt;/a&gt;.&#xA;For example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cc_library(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;build-all-the-files&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = glob([&amp;#34;*.cc&amp;#34;]),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hdrs = glob([&amp;#34;*.h&amp;#34;]),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this target, Bazel will build all the &lt;code&gt;.cc&lt;/code&gt; and &lt;code&gt;.h&lt;/code&gt; files it finds in the&#xA;same directory as the &lt;code&gt;BUILD&lt;/code&gt; file that contains this target (excluding&#xA;subdirectories).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Community updates</title>
      <link>http://localhost:1313/community/update/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/update/</guid>
      <description>&lt;p&gt;Join Bazel developer relations engineers for the monthly community update&#xA;livestream, or catch up on past ones.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Title&lt;/th&gt;&#xA;          &lt;th&gt;Date&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;          &lt;th&gt;Speakers&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gYrZDl7K9JM&#34;&gt;Roadmap Introduction&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;5/19/2022&lt;/td&gt;&#xA;          &lt;td&gt;The inaugural Bazel Community Update, introducing the community to some of Google&amp;rsquo;s Bazel leadership to talk about the general state of the project and its upcoming roadmap&lt;/td&gt;&#xA;          &lt;td&gt;Sven Tiffe, Tony Aiuto, Radhika Advani&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MuW5XNcFukE&#34;&gt;Hands-On with Bzlmod&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;6/23/2022&lt;/td&gt;&#xA;          &lt;td&gt;This month, we&amp;rsquo;re joined by Google engineers Yun Peng and Xudong Yang to talk about Bzlmod, the new dependency system that is expected to go GA later this year. We&amp;rsquo;ll cover the motivation behind the change, the new capabilities it brings to the table, and walk through some examples of it in action.&lt;/td&gt;&#xA;          &lt;td&gt;Yun Peng, Xudong Yang&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=E1-U7EAfhXw&#34;&gt;Extending Gazelle to generate BUILD files&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;7/21/2022&lt;/td&gt;&#xA;          &lt;td&gt;This month we&amp;rsquo;re joined by Son Luong Ngoc who will be showing the Gazelle language extension system. We&amp;rsquo;ll briefly touch on how it works under the covers, existing extensions, and how to go about writing your own extensions to ease the migration to Bazel.&lt;/td&gt;&#xA;          &lt;td&gt;Son Luong Ngoc&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RIfYqX0JJYk&#34;&gt;Using Bazel for JavaScript Projects&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8/18/2022&lt;/td&gt;&#xA;          &lt;td&gt;In this update, Alex Eagle joins us to talk about running JavaScript build tooling under Bazel. We&amp;rsquo;ll look at a couple of examples: a Vue.js frontend and Nest backend. We&amp;rsquo;ll cover the migration to newer rules_js provided by Aspect, and study how the tooling allows for fetching third-party dependencies and resolving them in the Node.js runtime.&lt;/td&gt;&#xA;          &lt;td&gt;Alex Eagle&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wMrua-W-LC4&#34;&gt;Like Peanut Butter &amp;amp; Jelly: Integrating Bazel with JetBrains IntelliJ&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;9/15/2022&lt;/td&gt;&#xA;          &lt;td&gt;Bazel is awesome. IntelliJ is awesome. Naturally, they are more awesome together. Bazel IntelliJ plugin gurus Mai Hussien from Google and Justin Kaeser from JetBrains join us this month to give a live demo and walkthrough of the plugin&amp;rsquo;s capabilities. Both new and experienced plugin users are welcome to come with questions.&lt;/td&gt;&#xA;          &lt;td&gt;Mai Hussien, Justin Kaeser&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kCs1xa45yjM&#34;&gt;Bazel at scale for surgical robots&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;10/27/2022&lt;/td&gt;&#xA;          &lt;td&gt;What do you do when CMake CI runs for four hours? Join Guillaume Maudoux of Tweag to learn about how they migrated large, embedded robotic applications to Bazel. Topics include configuring toolchains for cross compilation, improving CI performance, managing third-party dependencies, and creating a positive developer experience — everything needed to ensure that Bazel lives up to “{Fast, Correct} — Choose Two”.&lt;/td&gt;&#xA;          &lt;td&gt;Guillaume Maudoux&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uRjSghJQlsw&#34;&gt;The Ghosts of Bazel Past, Present, and Future&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;12/22/2022&lt;/td&gt;&#xA;          &lt;td&gt;For our special holiday Community Update and last of 2022, I&amp;rsquo;ll be joined by Google&amp;rsquo;s Sven Tiffe and Radhika Advani where we&amp;rsquo;ll be visited by the ghosts of Bazel Past (2022 year in review), Present (Bazel 6.0 release), and Future (what to expect in 2023).&lt;/td&gt;&#xA;          &lt;td&gt;Sven Tiffe, Radhika Advani&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Compiling Bazel from Source</title>
      <link>http://localhost:1313/install/compile-source/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/compile-source/</guid>
      <description>&lt;p&gt;This page describes how to install Bazel from source and provides&#xA;troubleshooting tips for common issues.&lt;/p&gt;&#xA;&lt;p&gt;To build Bazel from source, you can do one of the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Build it &lt;a href=&#34;#build-bazel-using-bazel&#34;&gt;using an existing Bazel binary&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Build it &lt;a href=&#34;#bootstrap-bazel&#34;&gt;without an existing Bazel binary&lt;/a&gt; which is known&#xA;as &lt;em&gt;bootstrapping&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;build-bazel-using-bazel&#34;&gt;Build Bazel using Bazel&lt;/h2&gt;&#xA;&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Get the latest Bazel release from the&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel/releases&#34;&gt;GitHub release page&lt;/a&gt; or with&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34;&gt;Bazelisk&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel/archive/master.zip&#34;&gt;Download Bazel&amp;rsquo;s sources from GitHub&lt;/a&gt;&#xA;and extract somewhere.&#xA;Alternatively you can git clone the source tree from &lt;a href=&#34;https://github.com/bazelbuild/bazel&#34;&gt;https://github.com/bazelbuild/bazel&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurable Build Attributes</title>
      <link>http://localhost:1313/configure/attributes/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/attributes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Configurable attributes&lt;/em&gt;&lt;/strong&gt;, commonly known as &lt;a href=&#34;http://localhost:1313/reference/be/functions#select/&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;, is a Bazel feature that lets users toggle the values&#xA;of build rule attributes at the command line.&lt;/p&gt;&#xA;&lt;p&gt;This can be used, for example, for a multiplatform library that automatically&#xA;chooses the appropriate implementation for the architecture, or for a&#xA;feature-configurable binary that can be customized at build time.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# myapp/BUILD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cc_binary(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;mybinary&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = [&amp;#34;main.cc&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    deps = select({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;:arm_build&amp;#34;: [&amp;#34;:arm_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;:x86_debug_build&amp;#34;: [&amp;#34;:x86_dev_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//conditions:default&amp;#34;: [&amp;#34;:generic_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config_setting(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;arm_build&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    values = {&amp;#34;cpu&amp;#34;: &amp;#34;arm&amp;#34;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config_setting(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;x86_debug_build&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    values = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;cpu&amp;#34;: &amp;#34;x86&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;compilation_mode&amp;#34;: &amp;#34;dbg&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This declares a &lt;code&gt;cc_binary&lt;/code&gt; that &amp;ldquo;chooses&amp;rdquo; its deps based on the flags at the&#xA;command line. Specifically, &lt;code&gt;deps&lt;/code&gt; becomes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurable Build Attributes</title>
      <link>http://localhost:1313/docs/configurable-attributes/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/configurable-attributes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Configurable attributes&lt;/em&gt;&lt;/strong&gt;, commonly known as &lt;a href=&#34;http://localhost:1313/reference/be/functions#select/&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;, is a Bazel feature that lets users toggle the values&#xA;of build rule attributes at the command line.&lt;/p&gt;&#xA;&lt;p&gt;This can be used, for example, for a multiplatform library that automatically&#xA;chooses the appropriate implementation for the architecture, or for a&#xA;feature-configurable binary that can be customized at build time.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# myapp/BUILD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cc_binary(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;mybinary&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = [&amp;#34;main.cc&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    deps = select({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;:arm_build&amp;#34;: [&amp;#34;:arm_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;:x86_debug_build&amp;#34;: [&amp;#34;:x86_dev_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//conditions:default&amp;#34;: [&amp;#34;:generic_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config_setting(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;arm_build&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    values = {&amp;#34;cpu&amp;#34;: &amp;#34;arm&amp;#34;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config_setting(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;x86_debug_build&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    values = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;cpu&amp;#34;: &amp;#34;x86&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;compilation_mode&amp;#34;: &amp;#34;dbg&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This declares a &lt;code&gt;cc_binary&lt;/code&gt; that &amp;ldquo;chooses&amp;rdquo; its deps based on the flags at the&#xA;command line. Specifically, &lt;code&gt;deps&lt;/code&gt; becomes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurable Query (cquery)</title>
      <link>http://localhost:1313/query/cquery/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/query/cquery/</guid>
      <description>&lt;p&gt;&lt;code&gt;cquery&lt;/code&gt; is a variant of &lt;a href=&#34;http://localhost:1313/query/language/&#34;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; that correctly handles&#xA;&lt;a href=&#34;http://localhost:1313/docs/configurable-attributes/&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; and build options&amp;rsquo; effects on the&#xA;build graph.&lt;/p&gt;&#xA;&lt;p&gt;It achieves this by running over the results of Bazel&amp;rsquo;s &lt;a href=&#34;http://localhost:1313/extending/concepts#evaluation-model/&#34;&gt;analysis&#xA;phase&lt;/a&gt;,&#xA;which integrates these effects. &lt;code&gt;query&lt;/code&gt;, by contrast, runs over the results of&#xA;Bazel&amp;rsquo;s loading phase, before options are evaluated.&lt;/p&gt;&#xA;&lt;p&gt;For example:&lt;/p&gt;&#xA;&lt;pre&gt;&#xA;$ cat &gt; tree/BUILD &amp;lt;&amp;lt;EOF&#xA;sh_library(&#xA;    name = &#34;ash&#34;,&#xA;    deps = select({&#xA;        &#34;:excelsior&#34;: [&#34;:manna-ash&#34;],&#xA;        &#34;:americana&#34;: [&#34;:white-ash&#34;],&#xA;        &#34;//conditions:default&#34;: [&#34;:common-ash&#34;],&#xA;    }),&#xA;)&#xA;sh_library(name = &#34;manna-ash&#34;)&#xA;sh_library(name = &#34;white-ash&#34;)&#xA;sh_library(name = &#34;common-ash&#34;)&#xA;config_setting(&#xA;    name = &#34;excelsior&#34;,&#xA;    values = {&#34;define&#34;: &#34;species=excelsior&#34;},&#xA;)&#xA;config_setting(&#xA;    name = &#34;americana&#34;,&#xA;    values = {&#34;define&#34;: &#34;species=americana&#34;},&#xA;)&#xA;EOF&#xA;&lt;/pre&gt;&#xA;&lt;pre&gt;&#xA;# Traditional query: query doesn&#39;t know which select() branch you will choose,&#xA;# so it conservatively lists all of possible choices, including all used config_settings.&#xA;$ bazel query &#34;deps(//tree:ash)&#34; --noimplicit_deps&#xA;//tree:americana&#xA;//tree:ash&#xA;//tree:common-ash&#xA;//tree:excelsior&#xA;//tree:manna-ash&#xA;//tree:white-ash&#xA;&#xA;# cquery: cquery lets you set build options at the command line and chooses&#xA;# the exact dependencies that implies (and also the config_setting targets).&#xA;$ bazel cquery &#34;deps(//tree:ash)&#34; --define species=excelsior --noimplicit_deps&#xA;//tree:ash (9f87702)&#xA;//tree:manna-ash (9f87702)&#xA;//tree:americana (9f87702)&#xA;//tree:excelsior (9f87702)&#xA;&lt;/pre&gt;&#xA;&lt;p&gt;Each result includes a &lt;a href=&#34;#configurations&#34;&gt;unique identifier&lt;/a&gt; &lt;code&gt;(9f87702)&lt;/code&gt; of&#xA;the &lt;a href=&#34;http://localhost:1313/reference/glossary#configuration/&#34;&gt;configuration&lt;/a&gt; the&#xA;target is built with.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurations</title>
      <link>http://localhost:1313/extending/config/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/config/</guid>
      <description>&lt;p&gt;This page covers the benefits and basic usage of Starlark configurations,&#xA;Bazel&amp;rsquo;s API for customizing how your project builds. It includes how to define&#xA;build settings and provides examples.&lt;/p&gt;&#xA;&lt;p&gt;This makes it possible to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;define custom flags for your project, obsoleting the need for&#xA;&lt;a href=&#34;http://localhost:1313/docs/configurable-attributes#custom-keys/&#34;&gt;&lt;code&gt;--define&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;write&#xA;&lt;a href=&#34;http://localhost:1313/rules/lib/builtins/transition#transition/&#34;&gt;transitions&lt;/a&gt; to configure deps in&#xA;different configurations than their parents&#xA;(such as &lt;code&gt;--compilation_mode=opt&lt;/code&gt; or &lt;code&gt;--cpu=arm&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;bake better defaults into rules (such as automatically build &lt;code&gt;//my:android_app&lt;/code&gt;&#xA;with a specified SDK)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;and more, all completely from .bzl files (no Bazel release required). See the&#xA;&lt;code&gt;bazelbuild/examples&lt;/code&gt; repo for&#xA;&lt;a href=&#34;https://github.com/bazelbuild/examples/tree/HEAD/configurations&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configuring Bazel CI to Test Rules for Remote Execution</title>
      <link>http://localhost:1313/remote/ci/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/ci/</guid>
      <description>&lt;p&gt;This page is for owners and maintainers of Bazel rule repositories. It&#xA;describes how to configure the Bazel Continuous Integration (CI) system for&#xA;your repository to test your rules for compatibility against a remote execution&#xA;scenario. The instructions on this page apply to projects stored in&#xA;GitHub repositories.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Before completing the steps on this page, ensure the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Your GitHub repository is part of the&#xA;&lt;a href=&#34;https://github.com/bazelbuild&#34;&gt;Bazel GitHub organization&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;You have configured Buildkite for your repository as described in&#xA;&lt;a href=&#34;https://github.com/bazelbuild/continuous-integration/tree/master/buildkite&#34;&gt;Bazel Continuous Integration&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;setting-up-the-bazel-ci-for-testing&#34;&gt;Setting up the Bazel CI for testing&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;In your &lt;code&gt;.bazelci/presubmit.yml&lt;/code&gt; file, do the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contribute to Bazel documentation</title>
      <link>http://localhost:1313/contribute/docs/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/docs/</guid>
      <description>&lt;p&gt;Thank you for contributing to Bazel&amp;rsquo;s documentation! There are a few ways to&#xA;help create better docs for our community.&lt;/p&gt;&#xA;&lt;h2 id=&#34;documentation-types&#34;&gt;Documentation types&lt;/h2&gt;&#xA;&lt;p&gt;This site includes a few types of content.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Narrative documentation&lt;/em&gt;, which is written by technical writers and&#xA;engineers. Most of this site is narrative documentation that covers&#xA;conceptual and task-based guides.&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Reference documentation&lt;/em&gt;, which is generated documentation from code comments.&#xA;You can&amp;rsquo;t make changes to the reference doc pages directly, but instead need&#xA;to change their source.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;documentation-infrastructure&#34;&gt;Documentation infrastructure&lt;/h2&gt;&#xA;&lt;p&gt;Bazel documentation is served from Google and the source files are mirrored in&#xA;Bazel&amp;rsquo;s GitHub repository. You can make changes to the source files in GitHub.&#xA;If approved, you can merge the changes and a Bazel maintainer will update the&#xA;website source to publish your updates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contribution policy</title>
      <link>http://localhost:1313/contribute/policy/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/policy/</guid>
      <description>&lt;p&gt;translation: human&#xA;page_type: lcat&lt;/p&gt;&#xA;&lt;p&gt;This page covers Bazel&amp;rsquo;s governance model and contribution policy.&lt;/p&gt;&#xA;&lt;h2 id=&#34;governance-model&#34;&gt;Governance model&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/bazelbuild&#34;&gt;Bazel project&lt;/a&gt; is led and managed by Google&#xA;and has a large community of contributors outside of Google. Some Bazel&#xA;components (such as specific rules repositories under the&#xA;&lt;a href=&#34;https://github.com/bazelbuild&#34;&gt;bazelbuild&lt;/a&gt; organization) are led,&#xA;maintained, and managed by members of the community. The Google Bazel team&#xA;reviews suggestions to add community-owned repositories (such as rules) to the&#xA;&lt;a href=&#34;https://github.com/bazelbuild&#34;&gt;bazelbuild&lt;/a&gt; GitHub organization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating a Legacy Macro</title>
      <link>http://localhost:1313/rules/legacy-macro-tutorial/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/legacy-macro-tutorial/</guid>
      <description>&lt;p&gt;IMPORTANT: This tutorial is for &lt;a href=&#34;http://localhost:1313/extending/legacy-macros/&#34;&gt;&lt;em&gt;legacy macros&lt;/em&gt;&lt;/a&gt;. If&#xA;you only need to support Bazel 8 or newer, we recommend using &lt;a href=&#34;http://localhost:1313/extending/macros/&#34;&gt;symbolic&#xA;macros&lt;/a&gt; instead; take a look at &lt;a href=&#34;macro-tutorial&#34;&gt;Creating a Symbolic&#xA;Macro&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Imagine that you need to run a tool as part of your build. For example, you&#xA;may want to generate or preprocess a source file, or compress a binary. In this&#xA;tutorial, you are going to create a legacy macro that resizes an image.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating a Symbolic Macro</title>
      <link>http://localhost:1313/rules/macro-tutorial/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/macro-tutorial/</guid>
      <description>&lt;p&gt;IMPORTANT: This tutorial is for &lt;a href=&#34;http://localhost:1313/extending/macros/&#34;&gt;&lt;em&gt;symbolic macros&lt;/em&gt;&lt;/a&gt; – the new&#xA;macro system introduced in Bazel 8. If you need to support older Bazel versions,&#xA;you will want to write a &lt;a href=&#34;http://localhost:1313/extending/legacy-macros/&#34;&gt;legacy macro&lt;/a&gt; instead; take&#xA;a look at &lt;a href=&#34;legacy-macro-tutorial&#34;&gt;Creating a Legacy Macro&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Imagine that you need to run a tool as part of your build. For example, you&#xA;may want to generate or preprocess a source file, or compress a binary. In this&#xA;tutorial, you are going to create a symbolic macro that resizes an image.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating Persistent Workers</title>
      <link>http://localhost:1313/remote/creating/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/creating/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://localhost:1313/remote/persistent/&#34;&gt;Persistent workers&lt;/a&gt; can make your build faster. If&#xA;you have repeated actions in your build that have a high startup cost or would&#xA;benefit from cross-action caching, you may want to implement your own persistent&#xA;worker to perform these actions.&lt;/p&gt;&#xA;&lt;p&gt;The Bazel server communicates with the worker using &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt;. It&#xA;supports the use of protocol buffers or JSON strings.&lt;/p&gt;&#xA;&lt;p&gt;The worker implementation has two parts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The &lt;a href=&#34;#making-worker&#34;&gt;worker&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;a href=&#34;#rule-uses-worker&#34;&gt;rule that uses the worker&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;making-the-worker&#34;&gt;Making the worker&lt;/h2&gt;&#xA;&lt;p&gt;A persistent worker upholds a few requirements:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging Remote Cache Hits for Local Execution</title>
      <link>http://localhost:1313/remote/cache-local/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/cache-local/</guid>
      <description>&lt;p&gt;This page describes how to investigate cache misses in the context of local&#xA;execution.&lt;/p&gt;&#xA;&lt;p&gt;This page assumes that you have a build and/or test that successfully builds&#xA;locally and is set up to utilize remote caching, and that you want to ensure&#xA;that the remote cache is being effectively utilized.&lt;/p&gt;&#xA;&lt;p&gt;For tips on how to check your cache hit rate and how to compare the execution&#xA;logs between two Bazel invocations, see&#xA;&lt;a href=&#34;http://localhost:1313/remote/cache-remote/&#34;&gt;Debugging Remote Cache Hits for Remote Execution&lt;/a&gt;.&#xA;Everything presented in that guide also applies to remote caching with local&#xA;execution. However, local execution presents some additional challenges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging Remote Cache Hits for Remote Execution</title>
      <link>http://localhost:1313/remote/cache-remote/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/cache-remote/</guid>
      <description>&lt;p&gt;This page describes how to check your cache hit rate and how to investigate&#xA;cache misses in the context of remote execution.&lt;/p&gt;&#xA;&lt;p&gt;This page assumes that you have a build and/or test that successfully&#xA;utilizes remote execution, and you want to ensure that you are effectively&#xA;utilizing remote cache.&lt;/p&gt;&#xA;&lt;h2 id=&#34;checking-your-cache-hit-rate&#34;&gt;Checking your cache hit rate&lt;/h2&gt;&#xA;&lt;p&gt;In the standard output of your Bazel run, look at the &lt;code&gt;INFO&lt;/code&gt; line that lists&#xA;processes, which roughly correspond to Bazel actions. That line details&#xA;where the action was run. Look for the &lt;code&gt;remote&lt;/code&gt; label, which indicates an action&#xA;executed remotely, &lt;code&gt;linux-sandbox&lt;/code&gt; for actions executed in a local sandbox,&#xA;and other values for other execution strategies. An action whose result came&#xA;from a remote cache is displayed as &lt;code&gt;remote cache hit&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependencies</title>
      <link>http://localhost:1313/concepts/dependencies/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/concepts/dependencies/</guid>
      <description>&lt;p&gt;A target &lt;code&gt;A&lt;/code&gt; &lt;em&gt;depends upon&lt;/em&gt; a target &lt;code&gt;B&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; is needed by &lt;code&gt;A&lt;/code&gt; at build or&#xA;execution time. The &lt;em&gt;depends upon&lt;/em&gt; relation induces a&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Directed_acyclic_graph&#34;&gt;Directed Acyclic Graph&lt;/a&gt;&#xA;(DAG) over targets, and it is called a &lt;em&gt;dependency graph&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A target&amp;rsquo;s &lt;em&gt;direct&lt;/em&gt; dependencies are those other targets reachable by a path&#xA;of length 1 in the dependency graph. A target&amp;rsquo;s &lt;em&gt;transitive&lt;/em&gt; dependencies are&#xA;those targets upon which it depends via a path of any length through the graph.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Management</title>
      <link>http://localhost:1313/basics/dependencies/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/basics/dependencies/</guid>
      <description>&lt;p&gt;In looking through the previous pages, one theme repeats over and over: managing&#xA;your own code is fairly straightforward, but managing its dependencies is much&#xA;more difficult. There are all sorts of dependencies: sometimes there’s a&#xA;dependency on a task (such as “push the documentation before I mark a release as&#xA;complete”), and sometimes there’s a dependency on an artifact (such as “I need&#xA;to have the latest version of the computer vision library to build my code”).&#xA;Sometimes, you have internal dependencies on another part of your codebase, and&#xA;sometimes you have external dependencies on code or data owned by another team&#xA;(either in your organization or a third party). But in any case, the idea of “I&#xA;need that before I can have this” is something that recurs repeatedly in the&#xA;design of build systems, and managing dependencies is perhaps the most&#xA;fundamental job of a build system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploying Rules</title>
      <link>http://localhost:1313/rules/deploying/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/deploying/</guid>
      <description>&lt;p&gt;This page is for rule writers who are planning to make their rules available&#xA;to others.&lt;/p&gt;&#xA;&lt;p&gt;We recommend you start a new ruleset from the template repository:&#xA;&lt;a href=&#34;https://github.com/bazel-contrib/rules-template&#34;&gt;https://github.com/bazel-contrib/rules-template&lt;/a&gt;&#xA;That template follows the recommendations below, and includes API documentation generation&#xA;and sets up a CI/CD pipeline to make it trivial to distribute your ruleset.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hosting-and-naming-rules&#34;&gt;Hosting and naming rules&lt;/h2&gt;&#xA;&lt;p&gt;New rules should go into their own GitHub repository under your organization.&#xA;Start a thread on &lt;a href=&#34;https://github.com/bazelbuild/bazel/discussions&#34;&gt;GitHub&lt;/a&gt;&#xA;if you feel like your rules belong in the &lt;a href=&#34;https://github.com/bazelbuild&#34;&gt;bazelbuild&lt;/a&gt;&#xA;organization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Depsets</title>
      <link>http://localhost:1313/extending/depsets/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/depsets/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://localhost:1313/rules/lib/builtins/depset/&#34;&gt;Depsets&lt;/a&gt; are a specialized data structure for efficiently&#xA;collecting data across a target’s transitive dependencies. They are an essential&#xA;element of rule processing.&lt;/p&gt;&#xA;&lt;p&gt;The defining feature of depset is its time- and space-efficient union operation.&#xA;The depset constructor accepts a list of elements (&amp;ldquo;direct&amp;rdquo;) and a list of other&#xA;depsets (&amp;ldquo;transitive&amp;rdquo;), and returns a depset representing a set containing all the&#xA;direct elements and the union of all the transitive sets. Conceptually, the&#xA;constructor creates a new graph node that has the direct and transitive nodes&#xA;as its successors. Depsets have a well-defined ordering semantics, based on&#xA;traversal of this graph.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design Documents</title>
      <link>http://localhost:1313/contribute/design-documents/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/design-documents/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re planning to add, change, or remove a user-facing feature, or make a&#xA;&lt;em&gt;significant architectural change&lt;/em&gt; to Bazel, you &lt;strong&gt;must&lt;/strong&gt; write a design&#xA;document and have it reviewed before you can submit the change.&lt;/p&gt;&#xA;&lt;p&gt;Here are some examples of significant changes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Addition or deletion of native build rules&lt;/li&gt;&#xA;&lt;li&gt;Breaking-changes to native rules&lt;/li&gt;&#xA;&lt;li&gt;Changes to a native build rule semantics that affect the behavior of more&#xA;than a single rule&lt;/li&gt;&#xA;&lt;li&gt;Changes to Bazel&amp;rsquo;s rule definition API&lt;/li&gt;&#xA;&lt;li&gt;Changes to the APIs that Bazel uses to connect to other systems&lt;/li&gt;&#xA;&lt;li&gt;Changes to the Starlark language, semantics, or APIs&lt;/li&gt;&#xA;&lt;li&gt;Changes that could have a pervasive effect on Bazel performance or memory&#xA;usage (for better or for worse)&lt;/li&gt;&#xA;&lt;li&gt;Changes to widely used internal APIs&lt;/li&gt;&#xA;&lt;li&gt;Changes to flags and command-line interface.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;reasons-for-design-reviews&#34;&gt;Reasons for design reviews&lt;/h2&gt;&#xA;&lt;p&gt;When you write a design document, you can coordinate with other Bazel developers&#xA;and seek guidance from Bazel&amp;rsquo;s core team. For example, when a proposal adds,&#xA;removes, or modifies any function or object available in BUILD, MODULE.bazel, or&#xA;bzl files, add the &lt;a href=&#34;http://localhost:1313/maintainers-guide/&#34;&gt;Starlark team&lt;/a&gt; as reviewers.&#xA;Design documents are reviewed before submission because:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distributed Builds</title>
      <link>http://localhost:1313/basics/distributed-builds/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/basics/distributed-builds/</guid>
      <description>&lt;p&gt;When you have a large codebase, chains of dependencies can become very deep.&#xA;Even simple binaries can often depend on tens of thousands of build targets. At&#xA;this scale, it’s simply impossible to complete a build in a reasonable amount&#xA;of time on a single machine: no build system can get around the fundamental&#xA;laws of physics imposed on a machine’s hardware. The only way to make this work&#xA;is with a build system that supports distributed builds wherein the units of&#xA;work being done by the system are spread across an arbitrary and scalable&#xA;number of machines. Assuming we’ve broken the system’s work into small enough&#xA;units (more on this later), this would allow us to complete any build of any&#xA;size as quickly as we’re willing to pay for. This scalability is the holy grail&#xA;we’ve been working toward by defining an artifact-based build system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Execution</title>
      <link>http://localhost:1313/remote/dynamic/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/dynamic/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dynamic execution&lt;/strong&gt; is a feature in Bazel where local and remote execution of&#xA;the same action are started in parallel, using the output from the first branch&#xA;that finishes, cancelling the other branch. It combines the execution power&#xA;and/or large shared cache of a remote build system with the low latency of local&#xA;execution, providing the best of both worlds for clean and incremental builds&#xA;alike.&lt;/p&gt;&#xA;&lt;p&gt;This page describes how to enable, tune, and debug dynamic execution. If you&#xA;have both local and remote execution set up and are trying to adjust Bazel&#xA;settings for better performance, this page is for you. If you don&amp;rsquo;t already have&#xA;remote execution set up, go to the Bazel &lt;a href=&#34;http://localhost:1313/remote/rbe/&#34;&gt;Remote Execution&#xA;Overview&lt;/a&gt; first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Error: Variable x is read only</title>
      <link>http://localhost:1313/rules/errors/read-only-variable/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/errors/read-only-variable/</guid>
      <description>&lt;p&gt;A global variable cannot be reassigned. It will always point to the same object.&#xA;However, its content might change, if the value is mutable (for example, the&#xA;content of a list). Local variables don&amp;rsquo;t have this restriction.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a = [1, 2]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a[1] = 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;b = 3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;b = 4  # forbidden&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ERROR: /path/ext.bzl:7:1: Variable b is read only&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;You will get a similar error if you try to redefine a function (function&#xA;overloading is not supported), for example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Execution Groups</title>
      <link>http://localhost:1313/extending/exec-groups/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/exec-groups/</guid>
      <description>&lt;p&gt;Execution groups allow for multiple execution platforms within a single target.&#xA;Each execution group has its own &lt;a href=&#34;http://localhost:1313/extending/toolchains/&#34;&gt;toolchain&lt;/a&gt; dependencies and&#xA;performs its own &lt;a href=&#34;http://localhost:1313/extending/toolchains#toolchain-resolution/&#34;&gt;toolchain resolution&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;current-status&#34;&gt;Current status&lt;/h2&gt;&#xA;&lt;p&gt;Execution groups for certain natively declared actions, like &lt;code&gt;CppLink&lt;/code&gt;, can be&#xA;used inside &lt;code&gt;exec_properties&lt;/code&gt; to set per-action, per-target execution&#xA;requirements. For more details, see the&#xA;&lt;a href=&#34;#exec-groups-for-native-rules&#34;&gt;Default execution groups&lt;/a&gt; section.&lt;/p&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;Execution groups allow the rule author to define sets of actions, each with a&#xA;potentially different execution platform. Multiple execution platforms can allow&#xA;actions to execution differently, for example compiling an iOS app on a remote&#xA;(linux) worker and then linking/code signing on a local mac worker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extension Overview</title>
      <link>http://localhost:1313/extending/concepts/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/concepts/</guid>
      <description>&lt;!--  --&gt;&#xA;&lt;p&gt;This page describes how to extend the BUILD language using macros&#xA;and rules.&lt;/p&gt;&#xA;&lt;p&gt;Bazel extensions are files ending in &lt;code&gt;.bzl&lt;/code&gt;. Use a&#xA;&lt;a href=&#34;http://localhost:1313/concepts/build-files#load/&#34;&gt;load statement&lt;/a&gt; to import a symbol from an extension.&lt;/p&gt;&#xA;&lt;p&gt;Before learning the more advanced concepts, first:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Read about the &lt;a href=&#34;http://localhost:1313/rules/language/&#34;&gt;Starlark language&lt;/a&gt;, used in both the&#xA;&lt;code&gt;BUILD&lt;/code&gt; and &lt;code&gt;.bzl&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Learn how you can &lt;a href=&#34;http://localhost:1313/build/share-variables/&#34;&gt;share variables&lt;/a&gt;&#xA;between two &lt;code&gt;BUILD&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;macros-and-rules&#34;&gt;Macros and rules&lt;/h2&gt;&#xA;&lt;p&gt;A macro is a function that instantiates rules. Macros come in two flavors:&#xA;&lt;a href=&#34;http://localhost:1313/extending/macros/&#34;&gt;symbolic macros&lt;/a&gt; (new in Bazel 8) and &lt;a href=&#34;http://localhost:1313/extending/legacy-macros/&#34;&gt;legacy&#xA;macros&lt;/a&gt;. The two flavors of macros are defined&#xA;differently, but behave almost the same from the point of view of a user. A&#xA;macro is useful when a &lt;code&gt;BUILD&lt;/code&gt; file is getting too repetitive or too complex, as&#xA;it lets you reuse some code. The function is evaluated as soon as the &lt;code&gt;BUILD&lt;/code&gt;&#xA;file is read. After the evaluation of the &lt;code&gt;BUILD&lt;/code&gt; file, Bazel has little&#xA;information about macros. If your macro generates a &lt;code&gt;genrule&lt;/code&gt;, Bazel will&#xA;behave &lt;em&gt;almost&lt;/em&gt; as if you declared that &lt;code&gt;genrule&lt;/code&gt; in the &lt;code&gt;BUILD&lt;/code&gt; file. (The one&#xA;exception is that targets declared in a symbolic macro have &lt;a href=&#34;http://localhost:1313/extending/macros#visibility/&#34;&gt;special visibility&#xA;semantics&lt;/a&gt;: a symbolic macro can hide its internal&#xA;targets from the rest of the package.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>External dependencies overview</title>
      <link>http://localhost:1313/external/overview/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/overview/</guid>
      <description>&lt;p&gt;{# disableFinding(&amp;ldquo;repo&amp;rdquo;) #}&lt;/p&gt;&#xA;&lt;p&gt;Bazel supports &lt;em&gt;external dependencies&lt;/em&gt;, source files (both text and binary) used&#xA;in your build that are not from your workspace. For example, they could be a&#xA;ruleset hosted in a GitHub repo, a Maven artifact, or a directory on your local&#xA;machine outside your current workspace.&lt;/p&gt;&#xA;&lt;p&gt;This document gives an overview of the system before examining some of the&#xA;concepts in more detail.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview-of-the-system&#34;&gt;Overview of the system&lt;/h2&gt;&#xA;&lt;p&gt;Bazel&amp;rsquo;s external dependency system works on the basis of &lt;a href=&#34;#module&#34;&gt;&lt;em&gt;Bazel&#xA;modules&lt;/em&gt;&lt;/a&gt;, each of which is a versioned Bazel project, and&#xA;&lt;a href=&#34;#repository&#34;&gt;&lt;em&gt;repositories&lt;/em&gt;&lt;/a&gt; (or repos), which are directory trees containing&#xA;source files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extracting build performance metrics</title>
      <link>http://localhost:1313/advanced/performance/build-performance-metrics/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/performance/build-performance-metrics/</guid>
      <description>&lt;p&gt;Probably every Bazel user has experienced builds that were slow or slower than&#xA;anticipated. Improving the performance of individual builds has particular value&#xA;for targets with significant impact, such as:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Core developer targets that are frequently iterated on and (re)built.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Common libraries widely depended upon by other targets.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A representative target from a class of targets (e.g. custom rules),&#xA;diagnosing and fixing issues in one build might help to resolve issues at the&#xA;larger scale.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FAQ</title>
      <link>http://localhost:1313/about/faq/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/faq/</guid>
      <description>&lt;p&gt;If you have questions or need support, see &lt;a href=&#34;http://localhost:1313/help/&#34;&gt;Getting Help&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-bazel&#34;&gt;What is Bazel?&lt;/h2&gt;&#xA;&lt;p&gt;Bazel is a tool that automates software builds and tests. Supported build tasks include running compilers and linkers to produce executable programs and libraries, and assembling deployable packages for Android, iOS and other target environments. Bazel is similar to other tools like Make, Ant, Gradle, Buck, Pants and Maven.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-special-about-bazel&#34;&gt;What is special about Bazel?&lt;/h2&gt;&#xA;&lt;p&gt;Bazel was designed to fit the way software is developed at Google. It has the following features:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding Non-Hermetic Behavior in WORKSPACE Rules</title>
      <link>http://localhost:1313/remote/workspace/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/workspace/</guid>
      <description>&lt;p&gt;In the following, a host machine is the machine where Bazel runs.&lt;/p&gt;&#xA;&lt;p&gt;When using remote execution, the actual build and/or test steps are not&#xA;happening on the host machine, but are instead sent off to the remote execution&#xA;system. However, the steps involved in resolving workspace rules are happening&#xA;on the host machine. If your workspace rules access information about the&#xA;host machine for use during execution, your build is likely to break due to&#xA;incompatibilities between the environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frequently asked questions</title>
      <link>http://localhost:1313/external/faq/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/faq/</guid>
      <description>&lt;p&gt;{# disableFinding(&amp;ldquo;repo&amp;rdquo;) #}&#xA;{# disableFinding(HEADING_STACKED) #}&lt;/p&gt;&#xA;&lt;p&gt;This page answers some frequently asked questions about external dependencies in&#xA;Bazel.&lt;/p&gt;&#xA;&lt;h2 id=&#34;modulebazel&#34;&gt;MODULE.bazel&lt;/h2&gt;&#xA;&lt;h3 id=&#34;how-should-i-version-a-bazel-module&#34;&gt;How should I version a Bazel module?&lt;/h3&gt;&#xA;&lt;p&gt;Setting &lt;code&gt;version&lt;/code&gt; with the &lt;a href=&#34;http://localhost:1313/rules/lib/globals/module#module&#34;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; directive in the source archive&#xA;&lt;code&gt;MODULE.bazel&lt;/code&gt; can have several downsides and unintended side effects if not&#xA;managed carefully:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Duplication: releasing a new version of a module typically involves both&#xA;incrementing the version in &lt;code&gt;MODULE.bazel&lt;/code&gt; and tagging the release, two&#xA;separate steps that can fall out of sync. While automation can&#xA;reduce this risk, it&amp;rsquo;s simpler and safer to avoid it altogether.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frequently Asked Questions</title>
      <link>http://localhost:1313/rules/faq/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/faq/</guid>
      <description>&lt;p&gt;These are some common issues and questions with writing extensions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-is-my-file-not-produced--my-action-never-executed&#34;&gt;Why is my file not produced / my action never executed?&lt;/h2&gt;&#xA;&lt;p&gt;Bazel only executes the actions needed to produce the &lt;em&gt;requested&lt;/em&gt; output files.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;If the file you want has a label, you can request it directly:&#xA;&lt;code&gt;bazel build //pkg:myfile.txt&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;If the file is in an output group of the target, you may need to specify that&#xA;output group on the command line:&#xA;&lt;code&gt;bazel build //pkg:mytarget --output_groups=foo&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Help</title>
      <link>http://localhost:1313/help/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/help/</guid>
      <description>&lt;p&gt;This page lists Bazel resources beyond the documentation and covers how to get&#xA;support from the Bazel team and community.&lt;/p&gt;&#xA;&lt;h2 id=&#34;search-existing-material&#34;&gt;Search existing material&lt;/h2&gt;&#xA;&lt;p&gt;In addition to the documentation, you can find helpful information by searching:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/bazel-discuss&#34;&gt;Bazel user group&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel/discussions&#34;&gt;Bazel GitHub Discussions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.bazel.build/&#34;&gt;Bazel blog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/bazel&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/jin/awesome-bazel&#34;&gt;&lt;code&gt;awesome-bazel&lt;/code&gt; resources&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;{% dynamic if request.tld != &amp;lsquo;cn&amp;rsquo; %}&lt;/p&gt;&#xA;&lt;h2 id=&#34;watch-videos&#34;&gt;Watch videos&lt;/h2&gt;&#xA;&lt;p&gt;There are recordings of Bazel talks at various conferences, such as:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bazel’s annual conference, BazelCon:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6ptKfAQNZ5RS4HMdmeilBcw&#34;&gt;BazelCon 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6rUiqylH-kumoZCWntG1vjp&#34;&gt;BazelCon 2023&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6rABfcAJO1VWeOUYL1kIn-p&#34;&gt;BazelCon 2022&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6pO6BaaQ1Ndos53gfRVLEoU&#34;&gt;BazelCon 2021&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6qZ5JRMtn20_s2uPz9vFYgU&#34;&gt;BazelCon 2020&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6ogKgytQXqUxJQ6nZlIWoTH&#34;&gt;BazelCon 2019&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6rBDwC0NMRPS8EJ0VRAW0QR&#34;&gt;BazelCon 2018&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLbzoR-pLrL6qvwchdtlSopLgUrz4J4zKP&#34;&gt;BazelCon 2017&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Bazel day on &lt;a href=&#34;https://opensourcelive.withgoogle.com/events/bazel&#34;&gt;Google Open Source Live&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;{% dynamic endif %}&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Bazel Docker Container</title>
      <link>http://localhost:1313/install/docker-container/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/docker-container/</guid>
      <description>&lt;p&gt;This page provides details on the contents of the Bazel container, how to build&#xA;the &lt;a href=&#34;https://github.com/abseil/abseil-cpp&#34;&gt;abseil-cpp&lt;/a&gt; project using Bazel&#xA;inside the Bazel container, and how to build this project directly&#xA;from the host machine using the Bazel container with directory mounting.&lt;/p&gt;&#xA;&lt;h2 id=&#34;build-abseil-project-from-your-host-machine-with-directory-mounting&#34;&gt;Build Abseil project from your host machine with directory mounting&lt;/h2&gt;&#xA;&lt;p&gt;The instructions in this section allow you to build using the Bazel container&#xA;with the sources checked out in your host environment. A container is started up&#xA;for each build command you execute. Build results are cached in your host&#xA;environment so they can be reused across builds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Guide for Bazel Maintainers</title>
      <link>http://localhost:1313/contribute/maintainers-guide/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/maintainers-guide/</guid>
      <description>&lt;p&gt;This is a guide for the maintainers of the Bazel open source project.&lt;/p&gt;&#xA;&lt;p&gt;If you are looking to contribute to Bazel, please read &lt;a href=&#34;http://localhost:1313/contribute/&#34;&gt;Contributing to&#xA;Bazel&lt;/a&gt; instead.&lt;/p&gt;&#xA;&lt;p&gt;The objectives of this page are to:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Serve as the maintainers&amp;rsquo; source of truth for the project’s contribution&#xA;process.&lt;/li&gt;&#xA;&lt;li&gt;Set expectations between the community contributors and the project&#xA;maintainers.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Bazel&amp;rsquo;s &lt;a href=&#34;http://localhost:1313/contribute/policy/&#34;&gt;core group of contributors&lt;/a&gt; has dedicated&#xA;subteams to manage aspects of the open source project. These are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Guide for rolling out breaking changes</title>
      <link>http://localhost:1313/contribute/breaking-changes/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/breaking-changes/</guid>
      <description>&lt;p&gt;It is inevitable that we will make breaking changes to Bazel. We will have to&#xA;change our designs and fix the things that do not quite work. However, we need&#xA;to make sure that community and Bazel ecosystem can follow along. To that end,&#xA;Bazel project has adopted a&#xA;&lt;a href=&#34;http://localhost:1313/release/backward-compatibility/&#34;&gt;backward compatibility policy&lt;/a&gt;.&#xA;This document describes the process for Bazel contributors to make a breaking&#xA;change in Bazel to adhere to this policy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hermeticity</title>
      <link>http://localhost:1313/basics/hermeticity/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/basics/hermeticity/</guid>
      <description>&lt;p&gt;This page covers hermeticity, the benefits of using hermetic builds, and&#xA;strategies for identifying non-hermetic behavior in your builds.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;When given the same input source code and product configuration, a hermetic&#xA;build system always returns the same output by isolating the build from changes&#xA;to the host system.&lt;/p&gt;&#xA;&lt;p&gt;In order to isolate the build, hermetic builds are insensitive to libraries and&#xA;other software installed on the local or remote host machine. They depend on&#xA;specific versions of build tools, such as compilers, and dependencies, such as&#xA;libraries. This makes the build process self-contained as it doesn&amp;rsquo;t rely on&#xA;services external to the build environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing / Updating Bazel using Bazelisk</title>
      <link>http://localhost:1313/install/bazelisk/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/bazelisk/</guid>
      <description>&lt;h2 id=&#34;installing-bazel&#34;&gt;Installing Bazel&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34;&gt;Bazelisk&lt;/a&gt; is the&#xA;recommended way to install Bazel on Ubuntu, Windows, and macOS. It automatically&#xA;downloads and installs the appropriate version of Bazel. Use Bazelisk if you&#xA;need to switch between different versions of Bazel depending on the current&#xA;working directory, or to always keep Bazel updated to the latest release.&lt;/p&gt;&#xA;&lt;p&gt;For more details, see&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk/blob/master/README.md&#34;&gt;the official README&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;updating-bazel&#34;&gt;Updating Bazel&lt;/h2&gt;&#xA;&lt;p&gt;Bazel has a &lt;a href=&#34;http://localhost:1313/release/backward-compatibility/&#34;&gt;backward compatibility policy&lt;/a&gt;&#xA;(see &lt;a href=&#34;http://localhost:1313/contribute/breaking-changes/&#34;&gt;guidance for rolling out incompatible&#xA;changes&lt;/a&gt; if you&#xA;are the author of one). That page summarizes best practices on how to test and&#xA;migrate your project with upcoming incompatible changes and how to provide&#xA;feedback to the incompatible change authors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Bazel on macOS</title>
      <link>http://localhost:1313/install/os-x/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/os-x/</guid>
      <description>&lt;p&gt;This page describes how to install Bazel on macOS and set up your environment.&lt;/p&gt;&#xA;&lt;p&gt;You can install Bazel on macOS using one of the following methods:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Recommended&lt;/em&gt;: &lt;a href=&#34;http://localhost:1313/install/bazelisk/&#34;&gt;Use Bazelisk&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#install-on-mac-os-x-homebrew&#34;&gt;Use Homebrew&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#install-with-installer-mac-os-x&#34;&gt;Use the binary installer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/install/compile-source/&#34;&gt;Compile Bazel from source&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Bazel comes with two completion scripts. After installing Bazel, you can:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Access the &lt;a href=&#34;http://localhost:1313/install/completion#bash/&#34;&gt;bash completion script&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Install the &lt;a href=&#34;http://localhost:1313/install/completion#zsh/&#34;&gt;zsh completion script&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;install-on-mac-os-x-homebrew&#34;&gt;Installing using Homebrew&lt;/h2&gt;&#xA;&lt;h3 id=&#34;step-1-install-homebrew-on-macos&#34;&gt;Step 1: Install Homebrew on macOS&lt;/h3&gt;&#xA;&lt;p&gt;Install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (a one-time step):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Bazel on openSUSE Tumbleweed &amp; Leap</title>
      <link>http://localhost:1313/install/suse/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/suse/</guid>
      <description>&lt;p&gt;This page describes how to install Bazel on openSUSE Tumbleweed and Leap.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;NOTE:&lt;/code&gt; The Bazel team does not officially maintain openSUSE support. For issues&#xA;using Bazel on openSUSE please file a ticket at &lt;a href=&#34;https://bugzilla.opensuse.org/&#34;&gt;bugzilla.opensuse.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Packages are provided for openSUSE Tumbleweed and Leap. You can find all&#xA;available Bazel versions via openSUSE&amp;rsquo;s &lt;a href=&#34;https://software.opensuse.org/search?utf8=%E2%9C%93&amp;amp;baseproject=ALL&amp;amp;q=bazel&#34;&gt;software search&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The commands below must be run either via &lt;code&gt;sudo&lt;/code&gt; or while logged in as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-bazel-on-opensuse&#34;&gt;Installing Bazel on openSUSE&lt;/h2&gt;&#xA;&lt;p&gt;Run the following commands to install the package. If you need a specific&#xA;version, you can install it via the specific &lt;code&gt;bazelXXX&lt;/code&gt; package, otherwise,&#xA;just &lt;code&gt;bazel&lt;/code&gt; is enough:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Bazel on Ubuntu</title>
      <link>http://localhost:1313/install/ubuntu/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/ubuntu/</guid>
      <description>&lt;p&gt;This page describes the options for installing Bazel on Ubuntu.&#xA;It also provides links to the Bazel completion scripts and the binary installer,&#xA;if needed as a backup option (for example, if you don&amp;rsquo;t have admin access).&lt;/p&gt;&#xA;&lt;p&gt;Supported Ubuntu Linux platforms:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;22.04 (LTS)&lt;/li&gt;&#xA;&lt;li&gt;20.04 (LTS)&lt;/li&gt;&#xA;&lt;li&gt;18.04 (LTS)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Bazel should be compatible with other Ubuntu releases and Debian&#xA;&amp;ldquo;stretch&amp;rdquo; and above, but is untested and not guaranteed to work.&lt;/p&gt;&#xA;&lt;p&gt;Install Bazel on Ubuntu using one of the following methods:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Bazel on Windows</title>
      <link>http://localhost:1313/install/windows/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/windows/</guid>
      <description>&lt;p&gt;This page describes the requirements and steps to install Bazel on Windows.&#xA;It also includes troubleshooting and other ways to install Bazel, such as&#xA;using Chocolatey or Scoop.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-bazel&#34;&gt;Installing Bazel&lt;/h2&gt;&#xA;&lt;p&gt;This section covers the prerequisites, environment setup, and detailed&#xA;steps during installation on Windows.&lt;/p&gt;&#xA;&lt;h3 id=&#34;check-your-system&#34;&gt;Check your system&lt;/h3&gt;&#xA;&lt;p&gt;Recommended: 64 bit Windows 10, version 1703 (Creators Update) or newer&lt;/p&gt;&#xA;&lt;p&gt;To check your Windows version:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Click the Start button.&lt;/li&gt;&#xA;&lt;li&gt;Type &lt;code&gt;winver&lt;/code&gt; in the search box and press Enter.&lt;/li&gt;&#xA;&lt;li&gt;You should see the About Windows box with your Windows version information.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;install-the-prerequisites&#34;&gt;Install the prerequisites&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170&#34;&gt;Microsoft Visual C++ Redistributable&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;download-bazel&#34;&gt;Download Bazel&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt;: &lt;a href=&#34;http://localhost:1313/install/bazelisk/&#34;&gt;Use Bazelisk&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Integrating Bazel with IDEs</title>
      <link>http://localhost:1313/install/ide/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/install/ide/</guid>
      <description>&lt;p&gt;This page covers how to integrate Bazel with IDEs, such as IntelliJ, Android&#xA;Studio, and CLion (or build your own IDE plugin). It also includes links to&#xA;installation and plugin details.&lt;/p&gt;&#xA;&lt;p&gt;IDEs integrate with Bazel in a variety of ways, from features that allow Bazel&#xA;executions from within the IDE, to awareness of Bazel structures such as syntax&#xA;highlighting of the &lt;code&gt;BUILD&lt;/code&gt; files.&lt;/p&gt;&#xA;&lt;p&gt;If you are interested in developing an editor or IDE plugin for Bazel, please&#xA;join the &lt;code&gt;#ide&lt;/code&gt; channel on the &lt;a href=&#34;https://slack.bazel.build&#34;&gt;Bazel Slack&lt;/a&gt; or start&#xA;a discussion on &lt;a href=&#34;https://github.com/bazelbuild/bazel/discussions&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Integrating with C&#43;&#43; Rules</title>
      <link>http://localhost:1313/configure/integrate-cpp/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/integrate-cpp/</guid>
      <description>&lt;p&gt;This page describes how to integrate with C++ rules on various levels.&lt;/p&gt;&#xA;&lt;h2 id=&#34;accessing-the-c-toolchain&#34;&gt;Accessing the C++ toolchain&lt;/h2&gt;&#xA;&lt;p&gt;You should use the helper functions available at&#xA;&lt;a href=&#34;https://github.com/bazelbuild/rules_cc/blob/main/cc/find_cc_toolchain.bzl&#34;&gt;&lt;code&gt;@rules_cc//cc:find_cc_toolchain.bzl&lt;/code&gt;&lt;/a&gt;&#xA;to depend on a CC toolchain from a Starlark rule.&lt;/p&gt;&#xA;&lt;p&gt;To depend on a C++ toolchain in your rule, set the &lt;code&gt;toolchains&lt;/code&gt; parameter to&#xA;&lt;code&gt;use_cc_toolchain()&lt;/code&gt;. Then, in the rule implementation, use&#xA;&lt;code&gt;find_cpp_toolchain(ctx)&lt;/code&gt; to get the&#xA;&lt;a href=&#34;http://localhost:1313/rules/lib/providers/CcToolchainInfo/&#34;&gt;&lt;code&gt;CcToolchainInfo&lt;/code&gt;&lt;/a&gt;. A complete working&#xA;example can be found &lt;a href=&#34;https://github.com/bazelbuild/rules_cc/blob/main/examples/write_cc_toolchain_cpu/write_cc_toolchain_cpu.bzl&#34;&gt;in the rules_cc&#xA;examples&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;generating-command-lines-and-environment-variables-using-the-c-toolchain&#34;&gt;Generating command lines and environment variables using the C++ toolchain&lt;/h2&gt;&#xA;&lt;p&gt;Typically, you would integrate with the C++ toolchain to have the same&#xA;command line flags as C++ rules do, but without using C++ actions directly.&#xA;This is because when writing our own actions, they must behave&#xA;consistently with the C++ toolchain - for example, passing C++ command line&#xA;flags to a tool that invokes the C++ compiler behind the scenes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intro to Bazel</title>
      <link>http://localhost:1313/about/intro/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/intro/</guid>
      <description>&lt;p&gt;Bazel is an open-source build and test tool similar to Make, Maven, and Gradle.&#xA;It uses a human-readable, high-level build language. Bazel supports projects in&#xA;multiple languages and builds outputs for multiple platforms. Bazel supports&#xA;large codebases across multiple repositories, and large numbers of users.&lt;/p&gt;&#xA;&lt;h2 id=&#34;benefits&#34;&gt;Benefits&lt;/h2&gt;&#xA;&lt;p&gt;Bazel offers the following advantages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;High-level build language.&lt;/strong&gt; Bazel uses an abstract, human-readable&#xA;language to describe the build properties of your project at a high&#xA;semantical level. Unlike other tools, Bazel operates on the &lt;em&gt;concepts&lt;/em&gt;&#xA;of libraries, binaries, scripts, and data sets, shielding you from the&#xA;complexity of writing individual calls to tools such as compilers and&#xA;linkers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java and Bazel</title>
      <link>http://localhost:1313/docs/bazel-and-java/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/bazel-and-java/</guid>
      <description>&lt;p&gt;This page contains resources that help you use Bazel with Java projects. It&#xA;links to a tutorial, build rules, and other information specific to building&#xA;Java projects with Bazel.&lt;/p&gt;&#xA;&lt;h2 id=&#34;working-with-bazel&#34;&gt;Working with Bazel&lt;/h2&gt;&#xA;&lt;p&gt;The following resources will help you work with Bazel on Java projects:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/start/java/&#34;&gt;Tutorial: Building a Java Project&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/reference/be/java/&#34;&gt;Java rules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;migrating-to-bazel&#34;&gt;Migrating to Bazel&lt;/h2&gt;&#xA;&lt;p&gt;If you currently build your Java projects with Maven, follow the steps in the&#xA;migration guide to start building your Maven projects with Bazel:&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript and Bazel</title>
      <link>http://localhost:1313/docs/bazel-and-javascript/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/bazel-and-javascript/</guid>
      <description>&lt;p&gt;This page contains resources that help you use Bazel with JavaScript projects.&#xA;It links to build rules and other information specific to building JavaScript&#xA;with Bazel.&lt;/p&gt;&#xA;&lt;p&gt;The following resources will help you work with Bazel on JavaScript projects:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/rules_nodejs&#34;&gt;NodeJS toolchain&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_js&#34;&gt;rules_js&lt;/a&gt; - Bazel rules for building JavaScript programs&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_esbuild&#34;&gt;rules_esbuild&lt;/a&gt; - Bazel rules for &lt;a href=&#34;https://esbuild.github.io&#34;&gt;esbuild&lt;/a&gt; JS bundler&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_terser&#34;&gt;rules_terser&lt;/a&gt; - Bazel rules for &lt;a href=&#34;https://terser.org&#34;&gt;Terser&lt;/a&gt; - a JavaScript minifier&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_swc&#34;&gt;rules_swc&lt;/a&gt; - Bazel rules for &lt;a href=&#34;https://swc.rs&#34;&gt;swc&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_ts&#34;&gt;rules_ts&lt;/a&gt; - Bazel rules for &lt;a href=&#34;http://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_webpack&#34;&gt;rules_webpack&lt;/a&gt; - Bazel rules for &lt;a href=&#34;https://webpack.js.org&#34;&gt;Webpack&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_rollup&#34;&gt;rules_rollup&lt;/a&gt; - Bazel rules for &lt;a href=&#34;https://rollupjs.org&#34;&gt;Rollup&lt;/a&gt; - a JavaScript bundler&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_jest&#34;&gt;rules_jest&lt;/a&gt; - Bazel rules to run tests using &lt;a href=&#34;https://jestjs.io&#34;&gt;Jest&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_jasmine&#34;&gt;rules_jasmine&lt;/a&gt; - Bazel rules to run tests using &lt;a href=&#34;https://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_cypress&#34;&gt;rules_cypress&lt;/a&gt; - Bazel rules to run tests using &lt;a href=&#34;https://cypress.io&#34;&gt;Cypress&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/aspect-build/rules_deno&#34;&gt;rules_deno&lt;/a&gt; - Bazel rules for &lt;a href=&#34;http://deno.land&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>JSON Trace Profile</title>
      <link>http://localhost:1313/advanced/performance/json-trace-profile/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/performance/json-trace-profile/</guid>
      <description>&lt;p&gt;The JSON trace profile can be very useful to quickly understand what Bazel spent&#xA;time on during the invocation.&lt;/p&gt;&#xA;&lt;p&gt;By default, for all build-like commands and query, Bazel writes a profile into&#xA;the output base named &lt;code&gt;command-$INVOCATION_ID.profile.gz&lt;/code&gt;, where&#xA;&lt;code&gt;$INVOCATION_ID&lt;/code&gt; is the invocation identifier of the command. Bazel also creates&#xA;a symlink called &lt;code&gt;command.profile.gz&lt;/code&gt; in the output base that points the profile&#xA;of the latest command. You can configure whether a profile is written with the&#xA;&lt;a href=&#34;http://localhost:1313/reference/command-line-reference#flag--generate_json_trace_profile/&#34;&gt;&lt;code&gt;--generate_json_trace_profile&lt;/code&gt;&lt;/a&gt;&#xA;flag, and the location it is written to with the&#xA;&lt;a href=&#34;http://localhost:1313/docs/user-manual#profile/&#34;&gt;&lt;code&gt;--profile&lt;/code&gt;&lt;/a&gt; flag. Locations ending with &lt;code&gt;.gz&lt;/code&gt; are&#xA;compressed with GZIP. Bazel keeps the last 5 profiles, configurable by&#xA;&lt;a href=&#34;http://localhost:1313/reference/command-line-reference#flag--generate_json_trace_profile/&#34;&gt;&lt;code&gt;--profiles_to_retain&lt;/code&gt;&lt;/a&gt;,&#xA;in the output base by default for post-build analysis. Explicitly passing a&#xA;profile path with &lt;code&gt;--profile&lt;/code&gt; disables automatic garbage collection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Labels</title>
      <link>http://localhost:1313/concepts/labels/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/concepts/labels/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;label&lt;/strong&gt; is an identifier for a target. A typical label in its full canonical&#xA;form looks like:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@@myrepo//my/app/main:app_binary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first part of the label is the repository name, &lt;code&gt;@@myrepo&lt;/code&gt;. The double-&lt;code&gt;@&lt;/code&gt;&#xA;syntax signifies that this is a &lt;a href=&#34;http://localhost:1313/external/overview#canonical-repo-name/&#34;&gt;&lt;em&gt;canonical&lt;/em&gt; repo&#xA;name&lt;/a&gt;, which is unique within&#xA;the workspace. Labels with canonical repo names unambiguously identify a target&#xA;no matter which context they appear in.&lt;/p&gt;&#xA;&lt;p&gt;Often the canonical repo name is an arcane string that looks like&#xA;&lt;code&gt;@@rules_java++toolchains+local_jdk&lt;/code&gt;. What is much more commonly seen is&#xA;labels with an &lt;a href=&#34;http://localhost:1313/external/overview#apparent-repo-name/&#34;&gt;&lt;em&gt;apparent&lt;/em&gt; repo name&lt;/a&gt;,&#xA;which looks like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Legacy Macros</title>
      <link>http://localhost:1313/extending/legacy-macros/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/legacy-macros/</guid>
      <description>&lt;p&gt;{# disableFinding(&amp;ldquo;native&amp;rdquo;) #}&#xA;{# disableFinding(&amp;ldquo;Native&amp;rdquo;) #}&#xA;{# disableFinding(LINE_OVER_80_LINK) #}&lt;/p&gt;&#xA;&lt;p&gt;Legacy macros are unstructured functions called from &lt;code&gt;BUILD&lt;/code&gt; files that can&#xA;create targets. By the end of the&#xA;&lt;a href=&#34;http://localhost:1313/extending/concepts#evaluation-model/&#34;&gt;loading phase&lt;/a&gt;, legacy macros don&amp;rsquo;t exist&#xA;anymore, and Bazel sees only the concrete set of instantiated rules.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-you-shouldnt-use-legacy-macros-and-should-use-symbolic-macros-instead&#34;&gt;Why you shouldn&amp;rsquo;t use legacy macros (and should use Symbolic macros instead)&lt;/h2&gt;&#xA;&lt;p&gt;Where possible you should use &lt;a href=&#34;macros.md#macros&#34;&gt;symbolic macros&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Symbolic macros&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prevent action at a distance&lt;/li&gt;&#xA;&lt;li&gt;Make it possible to hide implementation details through granular visibility&lt;/li&gt;&#xA;&lt;li&gt;Take typed attributes, which in turn means automatic label and select&#xA;conversion.&lt;/li&gt;&#xA;&lt;li&gt;Are more readable&lt;/li&gt;&#xA;&lt;li&gt;Will soon have &lt;a href=&#34;macros.md#laziness&#34;&gt;lazy evaluation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;&#xA;&lt;p&gt;The typical use case for a macro is when you want to reuse a rule.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macros</title>
      <link>http://localhost:1313/extending/macros/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/macros/</guid>
      <description>&lt;p&gt;{# disableFinding(&amp;ldquo;Currently&amp;rdquo;) #}&#xA;{# disableFinding(TODO) #}&lt;/p&gt;&#xA;&lt;p&gt;This page covers the basics of using macros and includes typical use cases,&#xA;debugging, and conventions.&lt;/p&gt;&#xA;&lt;p&gt;A macro is a function called from the &lt;code&gt;BUILD&lt;/code&gt; file that can instantiate rules.&#xA;Macros are mainly used for encapsulation and code reuse of existing rules and&#xA;other macros.&lt;/p&gt;&#xA;&lt;p&gt;Macros come in two flavors: symbolic macros, which are described on this page,&#xA;and &lt;a href=&#34;http://localhost:1313/legacy-macros/&#34;&gt;legacy macros&lt;/a&gt;. Where possible, we recommend using&#xA;symbolic macros for code clarity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maintaining Bazel Chocolatey package on Windows</title>
      <link>http://localhost:1313/contribute/windows-chocolatey-maintenance/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/windows-chocolatey-maintenance/</guid>
      <description>&lt;p&gt;Note: The Chocolatey package is experimental; please provide feedback&#xA;(&lt;code&gt;@petemounce&lt;/code&gt; in issue tracker).&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;You need:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://chocolatey.org&#34;&gt;chocolatey package manager&lt;/a&gt; installed&lt;/li&gt;&#xA;&lt;li&gt;(to publish) a chocolatey API key granting you permission to publish the&#xA;&lt;code&gt;bazel&lt;/code&gt; package&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/petemounce&#34;&gt;@petemounce&lt;/a&gt; currently&#xA;maintains this unofficial package.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;(to publish) to have set up that API key for the chocolatey source locally&#xA;via &lt;code&gt;choco apikey -k &amp;lt;your key here&amp;gt; -s https://chocolatey.org/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;build&#34;&gt;Build&lt;/h2&gt;&#xA;&lt;p&gt;Compile bazel with msys2 shell and &lt;code&gt;compile.sh&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maintaining Bazel Scoop package on Windows</title>
      <link>http://localhost:1313/contribute/windows-scoop-maintenance/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/windows-scoop-maintenance/</guid>
      <description>&lt;p&gt;Note: The Scoop package is experimental. To provide feedback, go to&#xA;&lt;code&gt;@excitoon&lt;/code&gt; in issue tracker.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;You need:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop package manager&lt;/a&gt; installed&lt;/li&gt;&#xA;&lt;li&gt;GitHub account in order to publish and create pull requests to&#xA;&lt;a href=&#34;https://github.com/scoopinstaller/scoop-main&#34;&gt;scoopinstaller/scoop-main&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/excitoon&#34;&gt;@excitoon&lt;/a&gt; currently maintains this&#xA;unofficial package. Feel free to ask questions by&#xA;&lt;a href=&#34;mailto:vladimir.chebotarev@gmail.com&#34;&gt;e-mail&lt;/a&gt; or&#xA;&lt;a href=&#34;http://telegram.me/excitoon&#34;&gt;Telegram&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;release-process&#34;&gt;Release process&lt;/h2&gt;&#xA;&lt;p&gt;Scoop packages are very easy to maintain. Once you have the URL of released&#xA;Bazel, you need to make appropriate changes in&#xA;&lt;a href=&#34;https://github.com/scoopinstaller/scoop-main/blob/master/bucket/bazel.json&#34;&gt;this file&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating from Maven to Bazel</title>
      <link>http://localhost:1313/migrate/maven/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/migrate/maven/</guid>
      <description>&lt;p&gt;This page describes how to migrate from Maven to Bazel, including the&#xA;prerequisites and installation steps. It describes the differences between Maven&#xA;and Bazel, and provides a migration example using the Guava project.&lt;/p&gt;&#xA;&lt;p&gt;When migrating from any build tool to Bazel, it&amp;rsquo;s best to have both build tools&#xA;running in parallel until you have fully migrated your development team, CI&#xA;system, and any other relevant systems. You can run Maven and Bazel in the same&#xA;repository.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating from Xcode to Bazel</title>
      <link>http://localhost:1313/migrate/xcode/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/migrate/xcode/</guid>
      <description>&lt;p&gt;This page describes how to build or test an Xcode project with Bazel. It&#xA;describes the differences between Xcode and Bazel, and provides the steps for&#xA;converting an Xcode project to a Bazel project. It also provides troubleshooting&#xA;solutions to address common errors.&lt;/p&gt;&#xA;&lt;h2 id=&#34;differences-between-xcode-and-bazel&#34;&gt;Differences between Xcode and Bazel&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Bazel requires you to explicitly specify every build target and its&#xA;dependencies, plus the corresponding build settings via build rules.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Bazel requires all files on which the project depends to be present within&#xA;the workspace directory or specified as dependencies in the &lt;code&gt;MODULE.bazel&lt;/code&gt;&#xA;file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrating to Platforms</title>
      <link>http://localhost:1313/concepts/platforms/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/concepts/platforms/</guid>
      <description>&lt;p&gt;Bazel has sophisticated &lt;a href=&#34;#background&#34;&gt;support&lt;/a&gt; for modeling&#xA;&lt;a href=&#34;http://localhost:1313/extending/platforms&#34;&gt;platforms&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/extending/toolchains&#34;&gt;toolchains&lt;/a&gt; for multi-architecture and&#xA;cross-compiled builds.&lt;/p&gt;&#xA;&lt;p&gt;This page summarizes the state of this support.&lt;/p&gt;&#xA;&lt;p&gt;Key Point: Bazel&amp;rsquo;s platform and toolchain APIs are available today. Not all&#xA;languages support them. Use these APIs with your project if you can. Bazel is&#xA;migrating all major languages so eventually all builds will be platform-based.&lt;/p&gt;&#xA;&lt;p&gt;See also:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extending/platforms&#34;&gt;Platforms&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/extending/toolchains&#34;&gt;Toolchains&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;&#xA;&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;&#xA;&lt;p&gt;C++ rules use platforms to select toolchains when&#xA;&lt;code&gt;--incompatible_enable_cc_toolchain_resolution&lt;/code&gt; is set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Module extensions</title>
      <link>http://localhost:1313/external/extension/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/extension/</guid>
      <description>&lt;p&gt;Module extensions allow users to extend the module system by reading input data&#xA;from modules across the dependency graph, performing necessary logic to resolve&#xA;dependencies, and finally creating repos by calling &lt;a href=&#34;http://localhost:1313/external/repo/&#34;&gt;repo&#xA;rules&lt;/a&gt;. These extensions have capabilities similar to repo&#xA;rules, which enables them to perform file I/O, send network requests, and so on.&#xA;Among other things, they allow Bazel to interact with other package management&#xA;systems while also respecting the dependency graph built out of Bazel modules.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiplex Workers (Experimental Feature)</title>
      <link>http://localhost:1313/remote/multiplex/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/multiplex/</guid>
      <description>&lt;p&gt;This page describes multiplex workers, how to write multiplex-compatible&#xA;rules, and workarounds for certain limitations.&lt;/p&gt;&#xA;&lt;p&gt;Caution: Experimental features are subject to change at any time.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Multiplex workers&lt;/em&gt; allow Bazel to handle multiple requests with a single worker&#xA;process. For multi-threaded workers, Bazel can use fewer resources to&#xA;achieve the same, or better performance. For example, instead of having one&#xA;worker process per worker, Bazel can have four multiplexed workers talking to&#xA;the same worker process, which can then handle requests in parallel. For&#xA;languages like Java and Scala, this saves JVM warm-up time and JIT compilation&#xA;time, and in general it allows using one shared cache between all workers of&#xA;the same type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Naming a Bazel related project</title>
      <link>http://localhost:1313/contribute/naming/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/naming/</guid>
      <description>&lt;p&gt;First, thank you for contributing to the Bazel ecosystem! Please reach out to&#xA;the Bazel community on the&#xA;&lt;a href=&#34;https://groups.google.com/forum/#!forum/bazel-discuss&#34;&gt;bazel-discuss mailing list&lt;/a&gt; to share your project and its suggested name.&lt;/p&gt;&#xA;&lt;p&gt;If you are building a Bazel related tool or sharing your Skylark rules,&#xA;we recommend following these guidelines for the name of your project:&lt;/p&gt;&#xA;&lt;h2 id=&#34;naming-starlark-rules&#34;&gt;Naming Starlark rules&lt;/h2&gt;&#xA;&lt;p&gt;See &lt;a href=&#34;http://localhost:1313/rules/deploying/&#34;&gt;Deploying new Starlark rules&lt;/a&gt;&#xA;in the docs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;naming-other-bazel-related-tools&#34;&gt;Naming other Bazel related tools&lt;/h2&gt;&#xA;&lt;p&gt;This section applies if you are building a tool to enrich the Bazel ecosystem.&#xA;For example, a new IDE plugin or a new build system migrator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimize Iteration Speed</title>
      <link>http://localhost:1313/advanced/performance/iteration-speed/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/performance/iteration-speed/</guid>
      <description>&lt;p&gt;This page describes how to optimize Bazel&amp;rsquo;s build performance when running Bazel&#xA;repeatedly.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bazels-runtime-state&#34;&gt;Bazel&amp;rsquo;s Runtime State&lt;/h2&gt;&#xA;&lt;p&gt;A Bazel invocation involves several interacting parts.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The &lt;code&gt;bazel&lt;/code&gt; command line interface (CLI) is the user-facing front-end tool&#xA;and receives commands from the user.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The CLI tool starts a &lt;a href=&#34;https://bazel.build/run/client-server&#34;&gt;&lt;em&gt;Bazel server&lt;/em&gt;&lt;/a&gt;&#xA;for each distinct &lt;a href=&#34;https://bazel.build/remote/output-directories&#34;&gt;output base&lt;/a&gt;.&#xA;The Bazel server is generally persistent, but will shut down after some idle&#xA;time so as to not waste resources.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimize Memory</title>
      <link>http://localhost:1313/advanced/performance/memory/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/advanced/performance/memory/</guid>
      <description>&lt;p&gt;This page describes how to limit and reduce the memory Bazel uses.&lt;/p&gt;&#xA;&lt;h2 id=&#34;running-bazel-with-limited-ram&#34;&gt;Running Bazel with Limited RAM&lt;/h2&gt;&#xA;&lt;p&gt;In certain situations, you may want Bazel to use minimal memory. You can set the&#xA;maximum heap via the startup flag&#xA;&lt;a href=&#34;http://localhost:1313/docs/user-manual#host-jvm-args/&#34;&gt;&lt;code&gt;--host_jvm_args&lt;/code&gt;&lt;/a&gt;,&#xA;like &lt;code&gt;--host_jvm_args=-Xmx2g&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;trade-incremental-build-speeds-for-memory&#34;&gt;Trade incremental build speeds for memory&lt;/h3&gt;&#xA;&lt;p&gt;If your builds are too big, Bazel may throw an &lt;code&gt;OutOfMemoryError&lt;/code&gt; (OOM) when&#xA;it doesn&amp;rsquo;t have enough memory. You can make Bazel use less memory, at the cost&#xA;of slower incremental builds, by passing the following command flags:&#xA;&lt;a href=&#34;http://localhost:1313/docs/user-manual#discard-analysis-cache/&#34;&gt;&lt;code&gt;--discard_analysis_cache&lt;/code&gt;&lt;/a&gt;,&#xA;&lt;a href=&#34;http://localhost:1313/reference/command-line-reference#flag--keep_state_after_build/&#34;&gt;&lt;code&gt;--nokeep_state_after_build&lt;/code&gt;&lt;/a&gt;,&#xA;and&#xA;&lt;a href=&#34;http://localhost:1313/reference/command-line-reference#flag--track_incremental_state/&#34;&gt;&lt;code&gt;--notrack_incremental_state&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimizing Performance</title>
      <link>http://localhost:1313/rules/performance/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/performance/</guid>
      <description>&lt;p&gt;When writing rules, the most common performance pitfall is to traverse or copy&#xA;data that is accumulated from dependencies. When aggregated over the whole&#xA;build, these operations can easily take O(N^2) time or space. To avoid this, it&#xA;is crucial to understand how to use depsets effectively.&lt;/p&gt;&#xA;&lt;p&gt;This can be hard to get right, so Bazel also provides a memory profiler that&#xA;assists you in finding spots where you might have made a mistake. Be warned:&#xA;The cost of writing an inefficient rule may not be evident until it is in&#xA;widespread use.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Output Directory Layout</title>
      <link>http://localhost:1313/remote/output-directories/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/output-directories/</guid>
      <description>&lt;p&gt;This page covers requirements and layout for output directories.&lt;/p&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;&#xA;&lt;p&gt;Requirements for an output directory layout:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Doesn&amp;rsquo;t collide if multiple users are building on the same box.&lt;/li&gt;&#xA;&lt;li&gt;Supports building in multiple workspaces at the same time.&lt;/li&gt;&#xA;&lt;li&gt;Supports building for multiple target configurations in the same workspace.&lt;/li&gt;&#xA;&lt;li&gt;Doesn&amp;rsquo;t collide with any other tools.&lt;/li&gt;&#xA;&lt;li&gt;Is easy to access.&lt;/li&gt;&#xA;&lt;li&gt;Is easy to clean, even selectively.&lt;/li&gt;&#xA;&lt;li&gt;Is unambiguous, even if the user relies on symbolic links when changing into&#xA;their client directory.&lt;/li&gt;&#xA;&lt;li&gt;All the build state per user should be underneath one directory (&amp;ldquo;I&amp;rsquo;d like to&#xA;clean all the .o files from all my clients.&amp;rdquo;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;current-layout&#34;&gt;Current layout&lt;/h2&gt;&#xA;&lt;p&gt;The solution that&amp;rsquo;s currently implemented:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Patch Acceptance Process</title>
      <link>http://localhost:1313/contribute/patch-acceptance/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/patch-acceptance/</guid>
      <description>&lt;p&gt;This page outlines how contributors can propose and make changes to the Bazel&#xA;code base.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Read the &lt;a href=&#34;http://localhost:1313/contribute/policy/&#34;&gt;Bazel Contribution policy&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Create a &lt;a href=&#34;https://github.com/bazelbuild/bazel/&#34;&gt;GitHub issue&lt;/a&gt; to&#xA;discuss your plan and design. Pull requests that change or add behavior&#xA;need a corresponding issue for tracking.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re proposing significant changes, write a&#xA;&lt;a href=&#34;http://localhost:1313/contribute/design-documents/&#34;&gt;design document&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ensure you&amp;rsquo;ve signed a &lt;a href=&#34;https://cla.developers.google.com&#34;&gt;Contributor License&#xA;Agreement&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Prepare a git commit that implements the feature. Don&amp;rsquo;t forget to add tests&#xA;and update the documentation. If your change has user-visible effects, please&#xA;&lt;a href=&#34;http://localhost:1313/contribute/release-notes/&#34;&gt;add release notes&lt;/a&gt;. If it is an incompatible change,&#xA;read the &lt;a href=&#34;http://localhost:1313/contribute/breaking-changes/&#34;&gt;guide for rolling out breaking changes&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Persistent Workers</title>
      <link>http://localhost:1313/remote/persistent/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/persistent/</guid>
      <description>&lt;p&gt;This page covers how to use persistent workers, the benefits, requirements, and&#xA;how workers affect sandboxing.&lt;/p&gt;&#xA;&lt;p&gt;A persistent worker is a long-running process started by the Bazel server, which&#xA;functions as a &lt;em&gt;wrapper&lt;/em&gt; around the actual &lt;em&gt;tool&lt;/em&gt; (typically a compiler), or is&#xA;the &lt;em&gt;tool&lt;/em&gt; itself. In order to benefit from persistent workers, the tool must&#xA;support doing a sequence of compilations, and the wrapper needs to translate&#xA;between the tool&amp;rsquo;s API and the request/response format described below. The same&#xA;worker might be called with and without the &lt;code&gt;--persistent_worker&lt;/code&gt; flag in the&#xA;same build, and is responsible for appropriately starting and talking to the&#xA;tool, as well as shutting down workers on exit. Each worker instance is assigned&#xA;(but not chrooted to) a separate working directory under&#xA;&lt;code&gt;&amp;lt;outputBase&amp;gt;/bazel-workers&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Platforms</title>
      <link>http://localhost:1313/extending/platforms/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/platforms/</guid>
      <description>&lt;p&gt;Bazel can build and test code on a variety of hardware, operating systems, and&#xA;system configurations, using many different versions of build tools such as&#xA;linkers and compilers. To help manage this complexity, Bazel has a concept of&#xA;&lt;em&gt;constraints&lt;/em&gt; and &lt;em&gt;platforms&lt;/em&gt;. A constraint is a dimension in which build or&#xA;production environments may differ, such as CPU architecture, the presence or&#xA;absence of a GPU, or the version of a system-installed compiler. A platform is a&#xA;named collection of choices for these constraints, representing the particular&#xA;resources that are available in some environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Query guide</title>
      <link>http://localhost:1313/query/guide/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/query/guide/</guid>
      <description>&lt;p&gt;This page covers how to get started using Bazel&amp;rsquo;s query language to trace&#xA;dependencies in your code.&lt;/p&gt;&#xA;&lt;p&gt;For a language details and &lt;code&gt;--output&lt;/code&gt; flag details, please see the&#xA;reference manuals, &lt;a href=&#34;http://localhost:1313/query/language/&#34;&gt;Bazel query reference&lt;/a&gt;&#xA;and &lt;a href=&#34;http://localhost:1313/query/cquery/&#34;&gt;Bazel cquery reference&lt;/a&gt;. You can get help by&#xA;typing &lt;code&gt;bazel help query&lt;/code&gt; or &lt;code&gt;bazel help cquery&lt;/code&gt; on the&#xA;command line.&lt;/p&gt;&#xA;&lt;p&gt;To execute a query while ignoring errors such as missing targets, use the&#xA;&lt;code&gt;--keep_going&lt;/code&gt; flag.&lt;/p&gt;&#xA;&lt;h2 id=&#34;finding-the-dependencies-of-a-rule&#34;&gt;Finding the dependencies of a rule&lt;/h2&gt;&#xA;&lt;p&gt;To see the dependencies of &lt;code&gt;//foo&lt;/code&gt;, use the&#xA;&lt;code&gt;deps&lt;/code&gt; function in bazel query:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Query quickstart</title>
      <link>http://localhost:1313/query/quickstart/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/query/quickstart/</guid>
      <description>&lt;p&gt;This tutorial covers how to work with Bazel to trace dependencies in your code using a premade Bazel project.&lt;/p&gt;&#xA;&lt;p&gt;For language and &lt;code&gt;--output&lt;/code&gt; flag details, see the &lt;a href=&#34;http://localhost:1313/query/language/&#34;&gt;Bazel query reference&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/query/cquery/&#34;&gt;Bazel cquery reference&lt;/a&gt; manuals. Get help in your IDE by typing &lt;code&gt;bazel help query&lt;/code&gt; or &lt;code&gt;bazel help cquery&lt;/code&gt; on the command line.&lt;/p&gt;&#xA;&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;&#xA;&lt;p&gt;This guide runs you through a set of basic queries you can use to learn more about your project&amp;rsquo;s file dependencies. It is intended for new Bazel developers with a basic knowledge of how Bazel and &lt;code&gt;BUILD&lt;/code&gt; files work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recommended Rules</title>
      <link>http://localhost:1313/community/recommended-rules/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/recommended-rules/</guid>
      <description>&lt;p&gt;In the documentation, we provide a list of&#xA;&lt;a href=&#34;http://localhost:1313/rules/&#34;&gt;recommended rules&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This is a set of high quality rules, which will provide a good experience to our&#xA;users. We make a distinction between the supported rules, and the hundreds of&#xA;rules you can find on the Internet.&lt;/p&gt;&#xA;&lt;h2 id=&#34;nomination&#34;&gt;Nomination&lt;/h2&gt;&#xA;&lt;p&gt;If a ruleset meets the requirements below, a rule maintainer can nominate it&#xA;to be part of the &lt;em&gt;recommended rules&lt;/em&gt; by filing a&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel/&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote Caching</title>
      <link>http://localhost:1313/remote/caching/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/caching/</guid>
      <description>&lt;p&gt;This page covers remote caching, setting up a server to host the cache, and&#xA;running builds using the remote cache.&lt;/p&gt;&#xA;&lt;p&gt;A remote cache is used by a team of developers and/or a continuous integration&#xA;(CI) system to share build outputs. If your build is reproducible, the&#xA;outputs from one machine can be safely reused on another machine, which can&#xA;make builds significantly faster.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Bazel breaks a build into discrete steps, which are called actions. Each action&#xA;has inputs, output names, a command line, and environment variables. Required&#xA;inputs and expected outputs are declared explicitly for each action.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote Execution Overview</title>
      <link>http://localhost:1313/remote/rbe/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/rbe/</guid>
      <description>&lt;p&gt;This page covers the benefits, requirements, and options for running Bazel&#xA;with remote execution.&lt;/p&gt;&#xA;&lt;p&gt;By default, Bazel executes builds and tests on your local machine. Remote&#xA;execution of a Bazel build allows you to distribute build and test actions&#xA;across multiple machines, such as a datacenter.&lt;/p&gt;&#xA;&lt;p&gt;Remote execution provides the following benefits:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Faster build and test execution through scaling of nodes available&#xA;for parallel actions&lt;/li&gt;&#xA;&lt;li&gt;A consistent execution environment for a development team&lt;/li&gt;&#xA;&lt;li&gt;Reuse of build outputs across a development team&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Bazel uses an open-source&#xA;&lt;a href=&#34;https://github.com/bazelbuild/remote-apis&#34;&gt;gRPC protocol&lt;/a&gt;&#xA;to allow for remote execution and remote caching.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote Execution Services</title>
      <link>http://localhost:1313/community/remote-execution-services/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/remote-execution-services/</guid>
      <description>&lt;p&gt;Use the following services to run Bazel with remote execution:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Manual&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Use the &lt;a href=&#34;https://github.com/bazelbuild/remote-apis&#34;&gt;gRPC protocol&lt;/a&gt;&#xA;directly to create your own remote execution service.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Self-service&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/buildbarn&#34;&gt;Buildbarn&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel-buildfarm&#34;&gt;Buildfarm&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitlab.com/BuildGrid/buildgrid&#34;&gt;BuildGrid&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/TraceMachina/nativelink&#34;&gt;NativeLink&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Commercial&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.aspect.build/&#34;&gt;Aspect Build&lt;/a&gt; – Self-hosted remote cache and remote execution services.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bitrise.io/why/features/mobile-build-caching-for-better-build-test-performance&#34;&gt;Bitrise&lt;/a&gt; - Providing the world&amp;rsquo;s leading mobile-first CI/CD and remote build caching platform.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.buildbuddy.io&#34;&gt;BuildBuddy&lt;/a&gt; - Remote build execution,&#xA;caching, and results UI.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.engflow.com&#34;&gt;EngFlow Remote Execution&lt;/a&gt; - Remote execution&#xA;and remote caching service with Build and Test UI. Can be self-hosted or hosted.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/TraceMachina/nativelink&#34;&gt;NativeLink&lt;/a&gt; - Remote build execution, caching, analytics, and simulation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Repositories, workspaces, packages, and targets</title>
      <link>http://localhost:1313/concepts/build-ref/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/concepts/build-ref/</guid>
      <description>&lt;p&gt;Bazel builds software from source code organized in directory trees called&#xA;repositories. A defined set of repositories comprises the workspace. Source&#xA;files in repositories are organized in a nested hierarchy of packages, where&#xA;each package is a directory that contains a set of related source files and one&#xA;&lt;code&gt;BUILD&lt;/code&gt; file. The &lt;code&gt;BUILD&lt;/code&gt; file specifies what software outputs can be built from&#xA;the source.&lt;/p&gt;&#xA;&lt;h3 id=&#34;repositories&#34;&gt;Repositories&lt;/h3&gt;&#xA;&lt;p&gt;Source files used in a Bazel build are organized in &lt;em&gt;repositories&lt;/em&gt; (often&#xA;shortened to &lt;em&gt;repos&lt;/em&gt;). A repo is a directory tree with a boundary marker file at&#xA;its root; such a boundary marker file could be &lt;code&gt;MODULE.bazel&lt;/code&gt;, &lt;code&gt;REPO.bazel&lt;/code&gt;, or&#xA;in legacy contexts, &lt;code&gt;WORKSPACE&lt;/code&gt; or &lt;code&gt;WORKSPACE.bazel&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Repository Rules</title>
      <link>http://localhost:1313/external/repo/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/repo/</guid>
      <description>&lt;p&gt;This page covers how to define repository rules and provides examples for more&#xA;details.&lt;/p&gt;&#xA;&lt;p&gt;An &lt;a href=&#34;http://localhost:1313/external/overview#repository/&#34;&gt;external repository&lt;/a&gt; is a directory tree,&#xA;containing source files usable in a Bazel build, which is generated on demand by&#xA;running its corresponding &lt;strong&gt;repo rule&lt;/strong&gt;. Repos can be defined in a multitude of&#xA;ways, but ultimately, each repo is defined by invoking a repo rule, just as&#xA;build targets are defined by invoking build rules. They can be used to depend on&#xA;third-party libraries (such as Maven packaged libraries) but also to generate&#xA;&lt;code&gt;BUILD&lt;/code&gt; files specific to the host Bazel is running on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Review the dependency graph</title>
      <link>http://localhost:1313/tutorials/cpp-dependency/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/cpp-dependency/</guid>
      <description>&lt;p&gt;A successful build has all of its dependencies explicitly stated in the &lt;code&gt;BUILD&lt;/code&gt;&#xA;file. Bazel uses those statements to create the project&amp;rsquo;s dependency graph,&#xA;which enables accurate incremental builds.&lt;/p&gt;&#xA;&lt;p&gt;To visualize the sample project&amp;rsquo;s dependencies, you can generate a text&#xA;representation of the dependency graph by running this command at the&#xA;workspace root:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bazel query --notool_deps --noimplicit_deps &amp;#34;deps(//main:hello-world)&amp;#34; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --output graph&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command tells Bazel to look for all dependencies for the target&#xA;&lt;code&gt;//main:hello-world&lt;/code&gt; (excluding host and implicit dependencies) and format the&#xA;output as a graph.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rolling Releases</title>
      <link>http://localhost:1313/release/rolling/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/release/rolling/</guid>
      <description>&lt;p&gt;This page contains an overview of all rolling releases, as per our&#xA;&lt;a href=&#34;https://bazel.build/release#rolling-releases&#34;&gt;release policy&lt;/a&gt;.&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34;&gt;Bazelisk&lt;/a&gt; is the best way to use&#xA;these releases.&lt;/p&gt;&#xA;&lt;h2 id=&#34;index&#34;&gt;Index&lt;/h2&gt;&#xA;&lt;iframe src=&#34;https://releases.bazel.build/rolling.html&#34; style=&#34;height: 3000px; width: 100%&#34; &gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>Rule Compatibility</title>
      <link>http://localhost:1313/release/rule-compatibility/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/release/rule-compatibility/</guid>
      <description>&lt;p&gt;Bazel Starlark rules can break compatibility with Bazel LTS releases in the&#xA;following two scenarios:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The rule breaks compatibility with future LTS releases because a feature it&#xA;depends on is removed from Bazel at HEAD.&lt;/li&gt;&#xA;&lt;li&gt;The rule breaks compatibility with the current or older LTS releases because&#xA;a feature it depends on is only available in newer Bazel LTS releases.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Meanwhile, the rule itself can ship incompatible changes for their users as&#xA;well. When combined with breaking changes in Bazel, upgrading the rule version&#xA;and Bazel version can often be a source of frustration for Bazel users. This&#xA;page covers how rules authors should maintain rule compatibility with Bazel to&#xA;make it easier for users to upgrade Bazel and rules.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rules</title>
      <link>http://localhost:1313/extending/rules/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/rules/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;rule&lt;/strong&gt; defines a series of &lt;a href=&#34;#actions&#34;&gt;&lt;strong&gt;actions&lt;/strong&gt;&lt;/a&gt; that Bazel performs on&#xA;inputs to produce a set of outputs, which are referenced in&#xA;&lt;a href=&#34;#providers&#34;&gt;&lt;strong&gt;providers&lt;/strong&gt;&lt;/a&gt; returned by the rule&amp;rsquo;s&#xA;&lt;a href=&#34;#implementation_function&#34;&gt;&lt;strong&gt;implementation function&lt;/strong&gt;&lt;/a&gt;. For example, a C++&#xA;binary rule might:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Take a set of &lt;code&gt;.cpp&lt;/code&gt; source files (inputs).&lt;/li&gt;&#xA;&lt;li&gt;Run &lt;code&gt;g++&lt;/code&gt; on the source files (action).&lt;/li&gt;&#xA;&lt;li&gt;Return the &lt;code&gt;DefaultInfo&lt;/code&gt; provider with the executable output and other files&#xA;to make available at runtime.&lt;/li&gt;&#xA;&lt;li&gt;Return the &lt;code&gt;CcInfo&lt;/code&gt; provider with C++-specific information gathered from the&#xA;target and its dependencies.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;From Bazel&amp;rsquo;s perspective, &lt;code&gt;g++&lt;/code&gt; and the standard C++ libraries are also inputs&#xA;to this rule. As a rule writer, you must consider not only the user-provided&#xA;inputs to a rule, but also all of the tools and libraries required to execute&#xA;the actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rules Tutorial</title>
      <link>http://localhost:1313/rules/rules-tutorial/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/rules-tutorial/</guid>
      <description>&lt;!--  --&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bazelbuild/starlark&#34;&gt;Starlark&lt;/a&gt; is a Python-like&#xA;configuration language originally developed for use in Bazel and since adopted&#xA;by other tools. Bazel&amp;rsquo;s &lt;code&gt;BUILD&lt;/code&gt; and &lt;code&gt;.bzl&lt;/code&gt; files are written in a dialect of&#xA;Starlark properly known as the &amp;ldquo;Build Language&amp;rdquo;, though it is often simply&#xA;referred to as &amp;ldquo;Starlark&amp;rdquo;, especially when emphasizing that a feature is&#xA;expressed in the Build Language as opposed to being a built-in or &amp;ldquo;native&amp;rdquo; part&#xA;of Bazel. Bazel augments the core language with numerous build-related functions&#xA;such as &lt;code&gt;glob&lt;/code&gt;, &lt;code&gt;genrule&lt;/code&gt;, &lt;code&gt;java_binary&lt;/code&gt;, and so on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sandboxing</title>
      <link>http://localhost:1313/docs/sandboxing/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/sandboxing/</guid>
      <description>&lt;p&gt;This article covers sandboxing in Bazel and debugging your sandboxing&#xA;environment.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Sandboxing&lt;/em&gt; is a permission restricting strategy that isolates processes from&#xA;each other or from resources in a system. For Bazel, this means restricting file&#xA;system access.&lt;/p&gt;&#xA;&lt;p&gt;Bazel&amp;rsquo;s file system sandbox runs processes in a working directory that only&#xA;contains known inputs, such that compilers and other tools don&amp;rsquo;t see source&#xA;files they should not access, unless they know the absolute paths to them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Searching the codebase</title>
      <link>http://localhost:1313/contribute/search/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/search/</guid>
      <description>&lt;h2 id=&#34;product-overview&#34;&gt;Product overview&lt;/h2&gt;&#xA;&lt;p&gt;Bazel&amp;rsquo;s &lt;a href=&#34;https://source.bazel.build&#34;&gt;code search and source browsing interface&lt;/a&gt;&#xA;is a web-based tool for browsing Bazel source code repositories. You can&#xA;use these features to navigate among different repositories, branches, and&#xA;files. You can also view history, diffs, and blame information.&lt;/p&gt;&#xA;&lt;h2 id=&#34;getting-started&#34;&gt;Getting started&lt;/h2&gt;&#xA;&lt;p&gt;Note: For the best experience, use the latest version of Chrome, Safari, or&#xA;Firefox.&lt;/p&gt;&#xA;&lt;p&gt;To access the code search and source browsing interface, open&#xA;&lt;a href=&#34;https://source.bazel.build&#34;&gt;https://source.bazel.build&lt;/a&gt; in your web browser.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Skyframe</title>
      <link>http://localhost:1313/reference/skyframe/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reference/skyframe/</guid>
      <description>&lt;p&gt;The parallel evaluation and incrementality model of Bazel.&lt;/p&gt;&#xA;&lt;h2 id=&#34;data-model&#34;&gt;Data model&lt;/h2&gt;&#xA;&lt;p&gt;The data model consists of the following items:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SkyValue&lt;/code&gt;. Also called nodes. &lt;code&gt;SkyValues&lt;/code&gt; are immutable objects that&#xA;contain all the data built over the course of the build and the inputs of&#xA;the build. Examples are: input files, output files, targets and configured&#xA;targets.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SkyKey&lt;/code&gt;. A short immutable name to reference a &lt;code&gt;SkyValue&lt;/code&gt;, for example,&#xA;&lt;code&gt;FILECONTENTS:/tmp/foo&lt;/code&gt; or &lt;code&gt;PACKAGE://foo&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SkyFunction&lt;/code&gt;. Builds nodes based on their keys and dependent nodes.&lt;/li&gt;&#xA;&lt;li&gt;Node graph. A data structure containing the dependency relationship between&#xA;nodes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Skyframe&lt;/code&gt;. Code name for the incremental evaluation framework Bazel is&#xA;based on.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h2&gt;&#xA;&lt;p&gt;A build is achieved by evaluating the node that represents the build request.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starlark Language</title>
      <link>http://localhost:1313/rules/language/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/language/</guid>
      <description>&lt;!--  --&gt;&#xA;&lt;p&gt;This page is an overview of &lt;a href=&#34;https://github.com/bazelbuild/starlark&#34;&gt;Starlark&lt;/a&gt;,&#xA;formerly known as Skylark, the language used in Bazel. For a complete list of&#xA;functions and types, see the &lt;a href=&#34;http://localhost:1313/rules/lib/overview/&#34;&gt;Bazel API reference&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For more information about the language, see &lt;a href=&#34;https://github.com/bazelbuild/starlark/&#34;&gt;Starlark&amp;rsquo;s GitHub repo&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For the authoritative specification of the Starlark syntax and&#xA;behavior, see the &lt;a href=&#34;https://github.com/bazelbuild/starlark/blob/master/spec.md&#34;&gt;Starlark Language Specification&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;syntax&#34;&gt;Syntax&lt;/h2&gt;&#xA;&lt;p&gt;Starlark&amp;rsquo;s syntax is inspired by Python3. This is valid syntax in Starlark:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fizz_buzz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Print Fizz Buzz numbers from 1 to n.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Fizz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Buzz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fizz_buzz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starlark&amp;rsquo;s semantics can differ from Python, but behavioral differences are&#xA;rare, except for cases where Starlark raises an error. The following Python&#xA;types are supported:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starlark Roadmap</title>
      <link>http://localhost:1313/community/roadmaps-starlark/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/roadmaps-starlark/</guid>
      <description>&lt;p&gt;&lt;em&gt;Last verified: 2020-04-21&lt;/em&gt;&#xA;(&lt;a href=&#34;https://github.com/bazelbuild/bazel-website/commits/master/roadmaps/starlark.md&#34;&gt;update history&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Point of contact:&lt;/em&gt; &lt;a href=&#34;https://github.com/laurentlb&#34;&gt;laurentlb&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;&#xA;&lt;p&gt;Our goal is to make Bazel more extensible. Users should be able to easily&#xA;implement their own rules, and support new languages and tools. We want to&#xA;improve the experience of writing and maintaining those rules.&lt;/p&gt;&#xA;&lt;p&gt;We focus on two areas:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Make the language and API simple, yet powerful.&lt;/li&gt;&#xA;&lt;li&gt;Provide better tooling for reading, writing, updating, debugging, and testing the code.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;q2-2020&#34;&gt;Q2 2020&lt;/h2&gt;&#xA;&lt;p&gt;Build health and Best practices:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Task-Based Build Systems</title>
      <link>http://localhost:1313/basics/task-based-builds/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/basics/task-based-builds/</guid>
      <description>&lt;p&gt;This page covers task-based build systems, how they work and some of the&#xA;complications that can occur with task-based systems. After shell scripts,&#xA;task-based build systems are the next logical evolution of building.&lt;/p&gt;&#xA;&lt;h2 id=&#34;understanding-task-based-build-systems&#34;&gt;Understanding task-based build systems&lt;/h2&gt;&#xA;&lt;p&gt;In a task-based build system, the fundamental unit of work is the task. Each&#xA;task is a script that can execute any sort of logic, and tasks specify other&#xA;tasks as dependencies that must run before them. Most major build systems in use&#xA;today, such as Ant, Maven, Gradle, Grunt, and Rake, are task based. Instead of&#xA;shell scripts, most modern build systems require engineers to create build files&#xA;that describe how to perform the build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test encyclopedia</title>
      <link>http://localhost:1313/reference/test-encyclopedia/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/reference/test-encyclopedia/</guid>
      <description>&lt;p&gt;An exhaustive specification of the test execution environment.&lt;/p&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;The Bazel BUILD language includes rules which can be used to define automated&#xA;test programs in many languages.&lt;/p&gt;&#xA;&lt;p&gt;Tests are run using &lt;a href=&#34;http://localhost:1313/docs/user-manual#test/&#34;&gt;&lt;code&gt;bazel test&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Users may also execute test binaries directly. This is allowed but not endorsed,&#xA;as such an invocation will not adhere to the mandates described below.&lt;/p&gt;&#xA;&lt;p&gt;Tests should be &lt;em&gt;hermetic&lt;/em&gt;: that is, they ought to access only those resources&#xA;on which they have a declared dependency. If tests are not properly hermetic&#xA;then they do not give historically reproducible results. This could be a&#xA;significant problem for culprit finding (determining which change broke a test),&#xA;release engineering auditability, and resource isolation of tests (automated&#xA;testing frameworks ought not DDOS a server because some tests happen to talk to&#xA;it).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>http://localhost:1313/rules/testing/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/testing/</guid>
      <description>&lt;p&gt;There are several different approaches to testing Starlark code in Bazel. This&#xA;page gathers the current best practices and frameworks by use case.&lt;/p&gt;&#xA;&lt;h2 id=&#34;testing-rules&#34;&gt;Testing rules&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bazelbuild/bazel-skylib&#34;&gt;Skylib&lt;/a&gt; has a test framework called&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel-skylib/blob/main/lib/unittest.bzl&#34;&gt;&lt;code&gt;unittest.bzl&lt;/code&gt;&lt;/a&gt;&#xA;for checking the analysis-time behavior of rules, such as their actions and&#xA;providers. Such tests are called &amp;ldquo;analysis tests&amp;rdquo; and are currently the best&#xA;option for testing the inner workings of rules.&lt;/p&gt;&#xA;&lt;p&gt;Some caveats:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Test assertions occur within the build, not a separate test runner process.&#xA;Targets that are created by the test must be named such that they do not&#xA;collide with targets from other tests or from the build. An error that&#xA;occurs during the test is seen by Bazel as a build breakage rather than a&#xA;test failure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Bazel codebase</title>
      <link>http://localhost:1313/contribute/codebase/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/codebase/</guid>
      <description>&lt;p&gt;This document is a description of the codebase and how Bazel is structured. It&#xA;is intended for people willing to contribute to Bazel, not for end-users.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;The codebase of Bazel is large (~350KLOC production code and ~260 KLOC test&#xA;code) and no one is familiar with the whole landscape: everyone knows their&#xA;particular valley very well, but few know what lies over the hills in every&#xA;direction.&lt;/p&gt;&#xA;&lt;p&gt;In order for people midway upon the journey not to find themselves within a&#xA;forest dark with the straightforward pathway being lost, this document tries to&#xA;give an overview of the codebase so that it&amp;rsquo;s easier to get started with&#xA;working on it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Bazel Query Reference</title>
      <link>http://localhost:1313/query/language/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/query/language/</guid>
      <description>&lt;p&gt;This page is the reference manual for the &lt;em&gt;Bazel Query Language&lt;/em&gt; used&#xA;when you use &lt;code&gt;bazel query&lt;/code&gt; to analyze build dependencies. It also&#xA;describes the output formats &lt;code&gt;bazel query&lt;/code&gt; supports.&lt;/p&gt;&#xA;&lt;p&gt;For practical use cases, see the &lt;a href=&#34;http://localhost:1313/query/guide/&#34;&gt;Bazel Query How-To&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;additional-query-reference&#34;&gt;Additional query reference&lt;/h2&gt;&#xA;&lt;p&gt;In addition to &lt;code&gt;query&lt;/code&gt;, which runs on the post-loading phase target graph,&#xA;Bazel includes &lt;em&gt;action graph query&lt;/em&gt; and &lt;em&gt;configurable query&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;action-graph-query&#34;&gt;Action graph query&lt;/h3&gt;&#xA;&lt;p&gt;The action graph query (&lt;code&gt;aquery&lt;/code&gt;) operates on the post-analysis Configured&#xA;Target Graph and exposes information about &lt;strong&gt;Actions&lt;/strong&gt;, &lt;strong&gt;Artifacts&lt;/strong&gt;, and&#xA;their relationships. &lt;code&gt;aquery&lt;/code&gt; is useful when you are interested in the&#xA;properties of the Actions/Artifacts generated from the Configured Target Graph.&#xA;For example, the actual commands run and their inputs, outputs, and mnemonics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toolchains</title>
      <link>http://localhost:1313/extending/toolchains/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/extending/toolchains/</guid>
      <description>&lt;p&gt;This page describes the toolchain framework, which is a way for rule authors to&#xA;decouple their rule logic from platform-based selection of tools. It is&#xA;recommended to read the &lt;a href=&#34;http://localhost:1313/extending/rules/&#34;&gt;rules&lt;/a&gt; and &lt;a href=&#34;http://localhost:1313/extending/platforms/&#34;&gt;platforms&lt;/a&gt;&#xA;pages before continuing. This page covers why toolchains are needed, how to&#xA;define and use them, and how Bazel selects an appropriate toolchain based on&#xA;platform constraints.&lt;/p&gt;&#xA;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s first look at the problem toolchains are designed to solve. Suppose you&#xA;are writing rules to support the &amp;ldquo;bar&amp;rdquo; programming language. Your &lt;code&gt;bar_binary&lt;/code&gt;&#xA;rule would compile &lt;code&gt;*.bar&lt;/code&gt; files using the &lt;code&gt;barc&lt;/code&gt; compiler, a tool that itself&#xA;is built as another target in your workspace. Since users who write &lt;code&gt;bar_binary&lt;/code&gt;&#xA;targets shouldn&amp;rsquo;t have to specify a dependency on the compiler, you make it an&#xA;implicit dependency by adding it to the rule definition as a private attribute.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Troubleshooting Bazel Remote Execution with Docker Sandbox</title>
      <link>http://localhost:1313/remote/sandbox/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/remote/sandbox/</guid>
      <description>&lt;p&gt;Bazel builds that succeed locally may fail when executed remotely due to&#xA;restrictions and requirements that do not affect local builds. The most common&#xA;causes of such failures are described in &lt;a href=&#34;http://localhost:1313/remote/rules/&#34;&gt;Adapting Bazel Rules for Remote Execution&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This page describes how to identify and resolve the most common issues that&#xA;arise with remote execution using the Docker sandbox feature, which imposes&#xA;restrictions upon the build equal to those of remote execution. This allows you&#xA;to troubleshoot your build without the need for a remote execution service.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use labels to reference targets</title>
      <link>http://localhost:1313/tutorials/cpp-labels/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/cpp-labels/</guid>
      <description>&lt;p&gt;In &lt;code&gt;BUILD&lt;/code&gt; files and at the command line, Bazel uses &lt;em&gt;labels&lt;/em&gt; to reference&#xA;targets - for example, &lt;code&gt;//main:hello-world&lt;/code&gt; or &lt;code&gt;//lib:hello-time&lt;/code&gt;. Their syntax&#xA;is:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//path/to/package:target-name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the target is a rule target, then &lt;code&gt;path/to/package&lt;/code&gt; is the path from the&#xA;workspace root (the directory containing the &lt;code&gt;MODULE.bazel&lt;/code&gt; file) to the directory&#xA;containing the &lt;code&gt;BUILD&lt;/code&gt; file, and &lt;code&gt;target-name&lt;/code&gt; is what you named the target&#xA;in the &lt;code&gt;BUILD&lt;/code&gt; file (the &lt;code&gt;name&lt;/code&gt; attribute). If the target is a file target,&#xA;then &lt;code&gt;path/to/package&lt;/code&gt; is the path to the root of the package, and&#xA;&lt;code&gt;target-name&lt;/code&gt; is the name of the target file, including its full&#xA;path relative to the root of the package (the directory containing the&#xA;package&amp;rsquo;s &lt;code&gt;BUILD&lt;/code&gt; file).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Bazel on Windows</title>
      <link>http://localhost:1313/configure/windows/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/windows/</guid>
      <description>&lt;p&gt;This page covers Best Practices for using Bazel on Windows. For installation&#xA;instructions, see &lt;a href=&#34;http://localhost:1313/install/windows/&#34;&gt;Install Bazel on Windows&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;known-issues&#34;&gt;Known issues&lt;/h2&gt;&#xA;&lt;p&gt;Windows-related Bazel issues are marked with the &amp;ldquo;area-Windows&amp;rdquo; label on GitHub.&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel/issues?q=is%3Aopen+is%3Aissue+label%3Aarea-Windows&#34;&gt;GitHub-Windows&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;best-practices&#34;&gt;Best practices&lt;/h2&gt;&#xA;&lt;h3 id=&#34;avoid-long-path-issues&#34;&gt;Avoid long path issues&lt;/h3&gt;&#xA;&lt;p&gt;Some tools have the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation&#34;&gt;Maximum Path Length Limitation&lt;/a&gt; on Windows, including the MSVC compiler.&#xA;To avoid hitting this issue, you can specify a short output directory for Bazel by the &lt;a href=&#34;http://localhost:1313/reference/command-line-reference#flag--output_user_root/&#34;&gt;--output_user_root&lt;/a&gt; flag.&lt;/p&gt;&#xA;&lt;p&gt;For example, add the following line to your bazelrc file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Macros to Create Custom Verbs</title>
      <link>http://localhost:1313/rules/verbs-tutorial/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/verbs-tutorial/</guid>
      <description>&lt;p&gt;Day-to-day interaction with Bazel happens primarily through a few commands:&#xA;&lt;code&gt;build&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;run&lt;/code&gt;. At times, though, these can feel limited: you may&#xA;want to push packages to a repository, publish documentation for end-users, or&#xA;deploy an application with Kubernetes. But Bazel doesn&amp;rsquo;t have a &lt;code&gt;publish&lt;/code&gt; or&#xA;&lt;code&gt;deploy&lt;/code&gt; command – where do these actions fit in?&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-bazel-run-command&#34;&gt;The bazel run command&lt;/h2&gt;&#xA;&lt;p&gt;Bazel&amp;rsquo;s focus on hermeticity, reproducibility, and incrementality means the&#xA;&lt;code&gt;build&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; commands aren&amp;rsquo;t helpful for the above tasks. These actions&#xA;may run in a sandbox, with limited network access, and aren&amp;rsquo;t guaranteed to be&#xA;re-run with every &lt;code&gt;bazel build&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using the Android Native Development Kit with Bazel</title>
      <link>http://localhost:1313/docs/android-ndk/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/android-ndk/</guid>
      <description>&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re new to Bazel, please start with the &lt;a href=&#34;http://localhost:1313/start/android-app/&#34;&gt;Building Android with&#xA;Bazel&lt;/a&gt; tutorial.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Bazel can run in many different build configurations, including several that use&#xA;the Android Native Development Kit (NDK) toolchain. This means that normal&#xA;&lt;code&gt;cc_library&lt;/code&gt; and &lt;code&gt;cc_binary&lt;/code&gt; rules can be compiled for Android directly within&#xA;Bazel. Bazel accomplishes this by using the &lt;code&gt;android_ndk_repository&lt;/code&gt; repository&#xA;rule.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Please ensure that you have installed the Android SDK and NDK.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vendor Mode</title>
      <link>http://localhost:1313/external/vendor/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/external/vendor/</guid>
      <description>&lt;p&gt;keywords: product:Bazel,Bzlmod,vendor&lt;/p&gt;&#xA;&lt;p&gt;{# disableFinding(&amp;ldquo;vendoring&amp;rdquo;) #}&#xA;{# disableFinding(&amp;ldquo;Vendoring&amp;rdquo;) #}&#xA;{# disableFinding(&amp;ldquo;vendored&amp;rdquo;) #}&#xA;{# disableFinding(&amp;ldquo;repo&amp;rdquo;) #}&lt;/p&gt;&#xA;&lt;p&gt;Vendor mode is a feature that lets you create a local copy of&#xA;external dependencies. This is useful for offline builds, or when you want to&#xA;control the source of an external dependency.&lt;/p&gt;&#xA;&lt;h2 id=&#34;enable-vendor-mode&#34;&gt;Enable vendor mode&lt;/h2&gt;&#xA;&lt;p&gt;You can enable vendor mode by specifying &lt;code&gt;--vendor_dir&lt;/code&gt; flag.&lt;/p&gt;&#xA;&lt;p&gt;For example, by adding it to your &lt;code&gt;.bazelrc&lt;/code&gt; file:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Enable vendor mode with vendor directory under &amp;lt;workspace&amp;gt;/vendor_src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;common --vendor_dir=vendor_src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The vendor directory can be either a relative path to your workspace root or an&#xA;absolute path.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visibility</title>
      <link>http://localhost:1313/concepts/visibility/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/concepts/visibility/</guid>
      <description>&lt;p&gt;This page covers Bazel&amp;rsquo;s two visibility systems:&#xA;&lt;a href=&#34;#target-visibility&#34;&gt;target visibility&lt;/a&gt; and &lt;a href=&#34;#load-visibility&#34;&gt;load visibility&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Both types of visibility help other developers distinguish between your&#xA;library&amp;rsquo;s public API and its implementation details, and help enforce structure&#xA;as your workspace grows. You can also use visibility when deprecating a public&#xA;API to allow current users while denying new ones.&lt;/p&gt;&#xA;&lt;h2 id=&#34;target-visibility&#34;&gt;Target visibility&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Target visibility&lt;/strong&gt; controls who may depend on your target — that is, who may&#xA;use your target&amp;rsquo;s label inside an attribute such as &lt;code&gt;deps&lt;/code&gt;. A target will fail&#xA;to build during the &lt;a href=&#34;http://localhost:1313/reference/glossary#analysis-phase/&#34;&gt;analysis&lt;/a&gt; phase if it&#xA;violates the visibility of one of its dependencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Who&#39;s Using Bazel</title>
      <link>http://localhost:1313/community/users/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/community/users/</guid>
      <description>&lt;p&gt;Note: Using Bazel? You can add your company on&#xA;&lt;a href=&#34;https://stackshare.io/bazel&#34;&gt;StackShare&lt;/a&gt;. To add yourself to this page,&#xA;contact &lt;a href=&#34;mailto:product@bazel.build&#34;&gt;product@bazel.build&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This page lists companies and OSS projects that are known to use Bazel.&#xA;This does not constitute an endorsement.&lt;/p&gt;&#xA;&lt;h2 id=&#34;companies-using-bazel&#34;&gt;Companies using Bazel&lt;/h2&gt;&#xA;&lt;h3 id=&#34;acqio&#34;&gt;&lt;a href=&#34;https://acqio.com.br&#34;&gt;acqio&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;img src=&#34;http://localhost:1313/community/images/acqio_logo.svg&#34; width=&#34;150&#34; align=&#34;right&#34;&gt;&#xA;&lt;p&gt;Acqio is a Fintech that provides payment products and services for small and&#xA;medium merchants. Acqio has a handful of monorepos and uses Bazel along with&#xA;Kubernetes to deliver fast and reliable microservices.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why a Build System?</title>
      <link>http://localhost:1313/basics/build-systems/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/basics/build-systems/</guid>
      <description>&lt;p&gt;This page discusses what build systems are, what they do, why you should use a&#xA;build system, and why compilers and build scripts aren&amp;rsquo;t the best choice as your&#xA;organization starts to scale. It&amp;rsquo;s intended for developers who don&amp;rsquo;t have much&#xA;experience with a build system.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-build-system&#34;&gt;What is a build system?&lt;/h2&gt;&#xA;&lt;p&gt;Fundamentally, all build systems have a straightforward purpose: they transform&#xA;the source code written by engineers into executable binaries that can be read&#xA;by machines. Build systems aren&amp;rsquo;t just for human-authored code; they also allow&#xA;machines to create builds automatically, whether for testing or for releases to&#xA;production. In an organization with thousands of engineers, it&amp;rsquo;s common that&#xA;most builds are triggered automatically rather than directly by engineers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Bazel?</title>
      <link>http://localhost:1313/about/why/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/why/</guid>
      <description>&lt;p&gt;Bazel is a &lt;a href=&#34;#fast&#34;&gt;fast&lt;/a&gt;, &lt;a href=&#34;#correct&#34;&gt;correct&lt;/a&gt;, and &lt;a href=&#34;#extensible&#34;&gt;extensible&lt;/a&gt;&#xA;build tool with &lt;a href=&#34;#integrated-testing&#34;&gt;integrated testing&lt;/a&gt; that supports multiple&#xA;&lt;a href=&#34;#multi-language&#34;&gt;languages&lt;/a&gt;, &lt;a href=&#34;#multi-repository&#34;&gt;repositories&lt;/a&gt;, and&#xA;&lt;a href=&#34;#multi-platform&#34;&gt;platforms&lt;/a&gt; in an industry-leading &lt;a href=&#34;#ecosystem&#34;&gt;ecosystem&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bazel-is-fast&#34;&gt;Bazel is fast&lt;/h2&gt;&#xA;&lt;p&gt;Bazel knows exactly what input files each build command needs, avoiding&#xA;unnecessary work by re-running only when the set of input files have&#xA;changed between each build.&#xA;It runs build commands with as much parallelism as possible, either within the&#xA;same computer or on &lt;a href=&#34;http://localhost:1313/remote/rbe/&#34;&gt;remote build nodes&lt;/a&gt;. If the structure of build&#xA;allows for it, it can run thousands of build or test commands at the same time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Write bazelrc configuration files</title>
      <link>http://localhost:1313/run/bazelrc/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/run/bazelrc/</guid>
      <description>&lt;p&gt;Bazel accepts many options. Some options are varied frequently (for example,&#xA;&lt;code&gt;--subcommands&lt;/code&gt;) while others stay the same across several builds (such as&#xA;&lt;code&gt;--package_path&lt;/code&gt;). To avoid specifying these unchanged options for every build&#xA;(and other commands), you can specify options in a configuration file, called&#xA;&lt;code&gt;.bazelrc&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;where-are-the-bazelrc-files&#34;&gt;Where are the &lt;code&gt;.bazelrc&lt;/code&gt; files?&lt;/h3&gt;&#xA;&lt;p&gt;Bazel looks for optional configuration files in the following locations,&#xA;in the order shown below. The options are interpreted in this order, so&#xA;options in later files can override a value from an earlier file if a&#xA;conflict arises. All options that control which of these files are loaded are&#xA;startup options, which means they must occur after &lt;code&gt;bazel&lt;/code&gt; and&#xA;before the command (&lt;code&gt;build&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, etc).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing release notes</title>
      <link>http://localhost:1313/contribute/release-notes/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contribute/release-notes/</guid>
      <description>&lt;p&gt;This document is targeted at Bazel contributors.&lt;/p&gt;&#xA;&lt;p&gt;Commit descriptions in Bazel include a &lt;code&gt;RELNOTES:&lt;/code&gt; tag followed by a release&#xA;note. This is used by the Bazel team to track changes in each release and write&#xA;the release announcement.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Is your change a bugfix? In that case, you don&amp;rsquo;t need a release note. Please&#xA;include a reference to the GitHub issue.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;If the change adds / removes / changes Bazel in a user-visible way, then it&#xA;may be advantageous to mention it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing Rules on Windows</title>
      <link>http://localhost:1313/rules/windows/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/rules/windows/</guid>
      <description>&lt;p&gt;This page focuses on writing Windows-compatible rules, common problems of&#xA;writing portable rules, and some solutions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;paths&#34;&gt;Paths&lt;/h2&gt;&#xA;&lt;p&gt;Problems:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Length limit&lt;/strong&gt;: maximum path length is 259 characters.&lt;/p&gt;&#xA;&lt;p&gt;Though Windows also supports longer paths (up to 32767 characters), many programs are built with&#xA;the lower limit.&lt;/p&gt;&#xA;&lt;p&gt;Be aware of this about programs you run in the actions.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Working directory&lt;/strong&gt;: is also limited to 259 characters.&lt;/p&gt;&#xA;&lt;p&gt;Processes cannot &lt;code&gt;cd&lt;/code&gt; into a directory longer than 259 characters.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
