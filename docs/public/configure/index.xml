<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Configure on Bazel Documentation</title>
    <link>http://localhost:1313/configure/</link>
    <description>Recent content in Configure on Bazel Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/configure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Best Practices</title>
      <link>http://localhost:1313/configure/best-practices/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/best-practices/</guid>
      <description>&lt;p&gt;This page assumes you are familiar with Bazel and provides guidelines and&#xA;advice on structuring your projects to take full advantage of Bazel&amp;rsquo;s features.&lt;/p&gt;&#xA;&lt;p&gt;The overall goals are:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To use fine-grained dependencies to allow parallelism and incrementality.&lt;/li&gt;&#xA;&lt;li&gt;To keep dependencies well-encapsulated.&lt;/li&gt;&#xA;&lt;li&gt;To make code well-structured and testable.&lt;/li&gt;&#xA;&lt;li&gt;To create a build configuration that is easy to understand and maintain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These guidelines are not requirements: few projects will be able to adhere to&#xA;all of them.  As the man page for lint says, &amp;ldquo;A special reward will be presented&#xA;to the first person to produce a real program that produces no errors with&#xA;strict checking.&amp;rdquo; However, incorporating as many of these principles as possible&#xA;should make a project more readable, less error-prone, and faster to build.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code coverage with Bazel</title>
      <link>http://localhost:1313/configure/coverage/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/coverage/</guid>
      <description>&lt;p&gt;Bazel features a &lt;code&gt;coverage&lt;/code&gt; sub-command to produce code coverage&#xA;reports on repositories that can be tested with &lt;code&gt;bazel coverage&lt;/code&gt;. Due&#xA;to the idiosyncrasies of the various language ecosystems, it is not&#xA;always trivial to make this work for a given project.&lt;/p&gt;&#xA;&lt;p&gt;This page documents the general process for creating and viewing&#xA;coverage reports, and also features some language-specific notes for&#xA;languages whose configuration is well-known. It is best read by first&#xA;reading &lt;a href=&#34;#creating-a-coverage-report&#34;&gt;the general section&lt;/a&gt;, and then&#xA;reading about the requirements for a specific language. Note also the&#xA;&lt;a href=&#34;#remote-execution&#34;&gt;remote execution section&lt;/a&gt;, which requires some&#xA;additional considerations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurable Build Attributes</title>
      <link>http://localhost:1313/configure/attributes/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/attributes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Configurable attributes&lt;/em&gt;&lt;/strong&gt;, commonly known as &lt;a href=&#34;http://localhost:1313/reference/be/functions#select/&#34;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt;, is a Bazel feature that lets users toggle the values&#xA;of build rule attributes at the command line.&lt;/p&gt;&#xA;&lt;p&gt;This can be used, for example, for a multiplatform library that automatically&#xA;chooses the appropriate implementation for the architecture, or for a&#xA;feature-configurable binary that can be customized at build time.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# myapp/BUILD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cc_binary(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;mybinary&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = [&amp;#34;main.cc&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    deps = select({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;:arm_build&amp;#34;: [&amp;#34;:arm_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;:x86_debug_build&amp;#34;: [&amp;#34;:x86_dev_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//conditions:default&amp;#34;: [&amp;#34;:generic_lib&amp;#34;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config_setting(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;arm_build&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    values = {&amp;#34;cpu&amp;#34;: &amp;#34;arm&amp;#34;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config_setting(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;x86_debug_build&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    values = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;cpu&amp;#34;: &amp;#34;x86&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;compilation_mode&amp;#34;: &amp;#34;dbg&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This declares a &lt;code&gt;cc_binary&lt;/code&gt; that &amp;ldquo;chooses&amp;rdquo; its deps based on the flags at the&#xA;command line. Specifically, &lt;code&gt;deps&lt;/code&gt; becomes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Integrating with C&#43;&#43; Rules</title>
      <link>http://localhost:1313/configure/integrate-cpp/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/integrate-cpp/</guid>
      <description>&lt;p&gt;This page describes how to integrate with C++ rules on various levels.&lt;/p&gt;&#xA;&lt;h2 id=&#34;accessing-the-c-toolchain&#34;&gt;Accessing the C++ toolchain&lt;/h2&gt;&#xA;&lt;p&gt;You should use the helper functions available at&#xA;&lt;a href=&#34;https://github.com/bazelbuild/rules_cc/blob/main/cc/find_cc_toolchain.bzl&#34;&gt;&lt;code&gt;@rules_cc//cc:find_cc_toolchain.bzl&lt;/code&gt;&lt;/a&gt;&#xA;to depend on a CC toolchain from a Starlark rule.&lt;/p&gt;&#xA;&lt;p&gt;To depend on a C++ toolchain in your rule, set the &lt;code&gt;toolchains&lt;/code&gt; parameter to&#xA;&lt;code&gt;use_cc_toolchain()&lt;/code&gt;. Then, in the rule implementation, use&#xA;&lt;code&gt;find_cpp_toolchain(ctx)&lt;/code&gt; to get the&#xA;&lt;a href=&#34;http://localhost:1313/rules/lib/providers/CcToolchainInfo/&#34;&gt;&lt;code&gt;CcToolchainInfo&lt;/code&gt;&lt;/a&gt;. A complete working&#xA;example can be found &lt;a href=&#34;https://github.com/bazelbuild/rules_cc/blob/main/examples/write_cc_toolchain_cpu/write_cc_toolchain_cpu.bzl&#34;&gt;in the rules_cc&#xA;examples&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;generating-command-lines-and-environment-variables-using-the-c-toolchain&#34;&gt;Generating command lines and environment variables using the C++ toolchain&lt;/h2&gt;&#xA;&lt;p&gt;Typically, you would integrate with the C++ toolchain to have the same&#xA;command line flags as C++ rules do, but without using C++ actions directly.&#xA;This is because when writing our own actions, they must behave&#xA;consistently with the C++ toolchain - for example, passing C++ command line&#xA;flags to a tool that invokes the C++ compiler behind the scenes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Bazel on Windows</title>
      <link>http://localhost:1313/configure/windows/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/configure/windows/</guid>
      <description>&lt;p&gt;This page covers Best Practices for using Bazel on Windows. For installation&#xA;instructions, see &lt;a href=&#34;http://localhost:1313/install/windows/&#34;&gt;Install Bazel on Windows&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;known-issues&#34;&gt;Known issues&lt;/h2&gt;&#xA;&lt;p&gt;Windows-related Bazel issues are marked with the &amp;ldquo;area-Windows&amp;rdquo; label on GitHub.&#xA;&lt;a href=&#34;https://github.com/bazelbuild/bazel/issues?q=is%3Aopen+is%3Aissue+label%3Aarea-Windows&#34;&gt;GitHub-Windows&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;best-practices&#34;&gt;Best practices&lt;/h2&gt;&#xA;&lt;h3 id=&#34;avoid-long-path-issues&#34;&gt;Avoid long path issues&lt;/h3&gt;&#xA;&lt;p&gt;Some tools have the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation&#34;&gt;Maximum Path Length Limitation&lt;/a&gt; on Windows, including the MSVC compiler.&#xA;To avoid hitting this issue, you can specify a short output directory for Bazel by the &lt;a href=&#34;http://localhost:1313/reference/command-line-reference#flag--output_user_root/&#34;&gt;--output_user_root&lt;/a&gt; flag.&lt;/p&gt;&#xA;&lt;p&gt;For example, add the following line to your bazelrc file:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
