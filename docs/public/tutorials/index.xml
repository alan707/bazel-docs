<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Bazel Documentation</title>
    <link>http://localhost:1313/tutorials/</link>
    <description>Recent content in Tutorials on Bazel Documentation</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bazel Tutorial: Configure C&#43;&#43; Toolchains</title>
      <link>http://localhost:1313/tutorials/ccp-toolchain-config/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/ccp-toolchain-config/</guid>
      <description>&lt;p&gt;This tutorial uses an example scenario to describe how to configure C++&#xA;toolchains for a project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-youll-learn&#34;&gt;What you&amp;rsquo;ll learn&lt;/h2&gt;&#xA;&lt;p&gt;In this tutorial you learn how to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Set up the build environment&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;--toolchain_resolution_debug&lt;/code&gt; to debug toolchain resolution&lt;/li&gt;&#xA;&lt;li&gt;Configure the C++ toolchain&lt;/li&gt;&#xA;&lt;li&gt;Create a Starlark rule that provides additional configuration for the&#xA;&lt;code&gt;cc_toolchain&lt;/code&gt; so that Bazel can build the application with &lt;code&gt;clang&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Build the C++ binary by running &lt;code&gt;bazel build //main:hello-world&lt;/code&gt; on a&#xA;Linux machine&lt;/li&gt;&#xA;&lt;li&gt;Cross-compile the binary for android by running &lt;code&gt;bazel build //main:hello-world --platforms=//:android_x86_64&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;&#xA;&lt;p&gt;This tutorial assumes you are on Linux and have successfully built C++&#xA;applications and installed the appropriate tooling and libraries. The tutorial&#xA;uses &lt;code&gt;clang version 19&lt;/code&gt;, which you can install on your system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Common C&#43;&#43; Build Use Cases</title>
      <link>http://localhost:1313/tutorials/cpp-use-cases/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/cpp-use-cases/</guid>
      <description>&lt;p&gt;Here you will find some of the most common use cases for building C++ projects&#xA;with Bazel. If you have not done so already, get started with building C++&#xA;projects with Bazel by completing the tutorial&#xA;&lt;a href=&#34;http://localhost:1313/start/cpp/&#34;&gt;Introduction to Bazel: Build a C++ Project&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For information on cc_library and hdrs header files, see&#xA;&lt;a href=&#34;http://localhost:1313/reference/be/c-cpp#cc_library&#34;&gt;cc_library&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;including-multiple-files-in-a-target&#34;&gt;Including multiple files in a target&lt;/h2&gt;&#xA;&lt;p&gt;You can include multiple files in a single target with&#xA;&lt;a href=&#34;http://localhost:1313/reference/be/functions#glob&#34;&gt;glob&lt;/a&gt;.&#xA;For example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cc_library(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;build-all-the-files&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    srcs = glob([&amp;#34;*.cc&amp;#34;]),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hdrs = glob([&amp;#34;*.h&amp;#34;]),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this target, Bazel will build all the &lt;code&gt;.cc&lt;/code&gt; and &lt;code&gt;.h&lt;/code&gt; files it finds in the&#xA;same directory as the &lt;code&gt;BUILD&lt;/code&gt; file that contains this target (excluding&#xA;subdirectories).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Review the dependency graph</title>
      <link>http://localhost:1313/tutorials/cpp-dependency/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/cpp-dependency/</guid>
      <description>&lt;p&gt;A successful build has all of its dependencies explicitly stated in the &lt;code&gt;BUILD&lt;/code&gt;&#xA;file. Bazel uses those statements to create the project&amp;rsquo;s dependency graph,&#xA;which enables accurate incremental builds.&lt;/p&gt;&#xA;&lt;p&gt;To visualize the sample project&amp;rsquo;s dependencies, you can generate a text&#xA;representation of the dependency graph by running this command at the&#xA;workspace root:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bazel query --notool_deps --noimplicit_deps &amp;#34;deps(//main:hello-world)&amp;#34; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --output graph&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command tells Bazel to look for all dependencies for the target&#xA;&lt;code&gt;//main:hello-world&lt;/code&gt; (excluding host and implicit dependencies) and format the&#xA;output as a graph.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use labels to reference targets</title>
      <link>http://localhost:1313/tutorials/cpp-labels/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tutorials/cpp-labels/</guid>
      <description>&lt;p&gt;In &lt;code&gt;BUILD&lt;/code&gt; files and at the command line, Bazel uses &lt;em&gt;labels&lt;/em&gt; to reference&#xA;targets - for example, &lt;code&gt;//main:hello-world&lt;/code&gt; or &lt;code&gt;//lib:hello-time&lt;/code&gt;. Their syntax&#xA;is:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//path/to/package:target-name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the target is a rule target, then &lt;code&gt;path/to/package&lt;/code&gt; is the path from the&#xA;workspace root (the directory containing the &lt;code&gt;MODULE.bazel&lt;/code&gt; file) to the directory&#xA;containing the &lt;code&gt;BUILD&lt;/code&gt; file, and &lt;code&gt;target-name&lt;/code&gt; is what you named the target&#xA;in the &lt;code&gt;BUILD&lt;/code&gt; file (the &lt;code&gt;name&lt;/code&gt; attribute). If the target is a file target,&#xA;then &lt;code&gt;path/to/package&lt;/code&gt; is the path to the root of the package, and&#xA;&lt;code&gt;target-name&lt;/code&gt; is the name of the target file, including its full&#xA;path relative to the root of the package (the directory containing the&#xA;package&amp;rsquo;s &lt;code&gt;BUILD&lt;/code&gt; file).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
